;************************************************
;   マクロ
;************************************************
%include    "../include/define.s"
%include    "../include/macro.s"

    ORG     BOOT_LOAD                   ; ロードアドレスをアセンブラに指示

;************************************************
;   エントリポイント
;************************************************
entry:
        ;----------------------------------
        ;  BPB(BIOS Parameter Block)
        ;----------------------------------
        jmp ipl                             ; IPLへジャンプ
        times   90 - ($ - $$) db 0x90       ;

        ;----------------------------------
        ;  IPL(Intial Program Loader)
        ;----------------------------------
ipl:
        cli                                 ; // 割り込み禁止

        mov     ax, 0x0000                  ; AX = 0x0000;
        mov     ds, ax                      ; DS = 0x0000;
        mov     es, ax                      ; ES = 0x0000;
        mov     ss, ax                      ; SS = 0x0000;
        mov     sp, BOOT_LOAD               ; SP = 0x7C00;

        sti                                 ; // 割り込み許可

        mov     [BOOT + drive.no], dl       ; ブートドライブを保持

        ;----------------------------------
        ;  文字列を表示
        ;----------------------------------
        cdecl   puts, .s0                   ; puts(.s0)

        ;----------------------------------
        ;  残りのセクタをすべて読み込む
        ;----------------------------------
        mov     bx, BOOT_SECT - 1           ; BX = 残りのブートセクタ数;
        mov     cx, BOOT_LOAD + SECT_SIZE   ; CX = 次のロードアドレス;

        cdecl   read_chs, BOOT, bx, cx      ; AX = read_chr(.chs, bx, cx);

        cmp     ax, bx                      ; if(AX != 残りのセクタ数)
.10Q:   jnc     .10E                        ; {
.10T:   cdecl   puts, .e0                   ;    puts(.e0);
        call    reboot                      ;    reboot();      // 再起動
.10E:                                       ; }

        ;----------------------------------
        ;  次のステージへ以降
        ;----------------------------------
        jmp     stage_2

        ;----------------------------------
        ;  データ
        ;----------------------------------
.s0     db  "Booting...", 0x0A, 0x0D, 0
.e0     db  "Error:sector read", 0

;************************************************
;   ブートドライブに関する情報
;************************************************
ALIGN 2, db 0
BOOT:                                           ; ブートドライブに関する情報
        istruc  drive
            at  drive.no,       dw 0            ; ドライブ番号
            at  drive.cyln,     dw 0            ; C: シリンダ
            at  drive.head,     dw 0            ; H: ヘッド
            at  drive.sect,     dw 2            ; S: セクタ
        iend

;************************************************
;   モジュール
;************************************************
%include "../modules/real/puts.s"
%include "../modules/real/reboot.s"
%include "../modules/real/read_chs.s"

;************************************************
;   ブートフラグ(先頭512バイトの終了)
;************************************************
    times   510 - ($ - $$) db 0x00
    db  0x55, 0xAA

;************************************************
;   リアルモード時に取得した情報
;************************************************
FONT:                                           ; フォント
.seg:   dw  0
.off:   dw  0
ACPI_DATA:                                      ; ACPI data
.adr:   dd  0                                   ; ACPI data address
.len:   dd  0                                   ; ACPI data length

;************************************************
;   モジュール(先頭512バイト以降に配置)
;************************************************
%include "../modules/real/itoa.s"
%include "../modules/real/get_drive_param.s"
%include "../modules/real/get_font_adr.s"
%include "../modules/real/get_mem_info.s"
%include "../modules/real/kbc.s"
%include "../modules/real/lba_chs.s"
%include "../modules/real/read_lba.s"

;************************************************
;   ブート処理の第2ステージ
;************************************************
stage_2:
        ;----------------------------------
        ;  文字列を表示
        ;----------------------------------
        cdecl   puts, .s0                       ; puts(.s0);
        
        ;----------------------------------
        ;  ドライブ情報を取得
        ;----------------------------------
        cdecl   get_drive_param, BOOT           ; get_drive_param(DX, BOOT.CYLN);
        cmp     ax, 0                           ; if(0 == AX)
.10Q:   jne     .10E                            ; {
.10T:   cdecl   puts, .e0                       ;   puts(.e0);
        call    reboot                          ;   reboot();   // 再起動
.10E:                                           ; }
        
        ;----------------------------------
        ;  ドライブ情報を表示
        ;----------------------------------
        mov     ax, [BOOT + drive.no]           ; AX = ブートドライブ;
        cdecl   itoa, ax, .p1, 2, 16, 0b0100    ;
        mov     ax, [BOOT + drive.cyln]         ;
        cdecl   itoa, ax, .p2, 4, 16, 0b0100    ;
        mov     ax, [BOOT + drive.head]         ; AX = ヘッド数;
        cdecl   itoa, ax, .p3, 2, 16, 0b0100    ;
        mov     ax, [BOOT + drive.sect]         ; AX = トラック当たりのセクタ数;
        cdecl   itoa, ax, .p4, 2, 16, 0b0100    ;
        cdecl   puts, .s1

        ;----------------------------------
        ;  次のステージへ以降
        ;----------------------------------
        jmp     stage_3                         ; 次のステージへ以降

        ;----------------------------------
        ;  データ
        ;----------------------------------
.s0     db  "2nd stege...", 0x0A, 0x0D, 0

.s1     db  " Drive:0x"
.p1     db  "  , C:0x"
.p2     db  "    , H:0x"
.p3     db  "  , S:0x"
.p4     db  "  ", 0x0A, 0x0D, 0

.e0     db  "Can't get drive parameter.", 0

;************************************************
;   ブート処理の第3ステージ
;************************************************
stage_3:
        ;----------------------------------
        ; 文字列を表示
        ;----------------------------------
        cdecl   puts, .s0

        ;----------------------------------
        ; プロテクトモードで使用するフォントは
        ; BIOSに内蔵されたものを流用する
        ;----------------------------------
        cdecl   get_font_adr, FONT              ; // BIOSのを取得

        ;----------------------------------
        ; フォントアドレスの表示
        ;----------------------------------
        cdecl   itoa, word [FONT.seg], .p1, 4, 16, 0b0100
        cdecl   itoa, word [FONT.off], .p2, 4, 16, 0b0100
        cdecl   puts, .s1

        ;----------------------------------
        ;  メモリ情報の取得と表示
        ;----------------------------------
        cdecl   get_mem_info                    ; get_mem_info();

        mov     eax, [ACPI_DATA.adr]            ; EAX = ACPI_DATA.adr;
        cmp     eax, 0                          ; if(EAX)
        je      .10E                            ; {

        cdecl   itoa, ax, .p4, 4, 16, 0b0100    ;    itoa(AX);  // 下位アドレスを変換
        shr     eax, 16                         ;    EAX >>= 16;
        cdecl   itoa, ax, .p3, 4, 16, 0b0100    ;    itoa(AX);  // 上位アドレスを変換

        cdecl   puts, .s2                       ;    puts(.s2); // アドレスを表示
.10E:                                           ; }

        ;----------------------------------
        ;  次のステージへ以降
        ;----------------------------------
        jmp     stage_4                         ; 次のステージへ以降

        ;----------------------------------
        ;  データ
        ;----------------------------------
.s0:    db  "3rd stage...", 0x0A, 0x0D, 0

.s1:    db  "Font Address="
.p1:    db  "ZZZZ:"
.p2:    db  "ZZZZ", 0x0A, 0x0D, 0
        db  0x0A, 0x0D, 0

.s2:    db  " ACPI data="
.p3:    db  "ZZZZ"
.p4:    db  "ZZZZ", 0x0A, 0x0D, 0

;************************************************
;   ブート処理の第4ステージ
;************************************************
stage_4:
        ;----------------------------------
        ; 文字列を表示
        ;----------------------------------
        cdecl   puts, .s0

        ;----------------------------------
        ; A20ゲートの有効化
        ;----------------------------------
        cli

        cdecl   KBC_Cmd_Write, 0xAD

        cdecl   KBC_Cmd_Write, 0xD0
        cdecl   KBC_Data_Read, .key

        mov     bl, [.key]
        or      bl, 0x02

        cdecl   KBC_Cmd_Write, 0xD1
        cdecl   KBC_Data_Write, bx

        cdecl   KBC_Cmd_Write, 0xAE

        sti
        
        ;----------------------------------
        ; 文字列を表示
        ;----------------------------------
        cdecl   puts, .s1
        
        ;----------------------------------
        ; 次のステージへ以降
        ;----------------------------------
        jmp     stage_5                         ; 次のステージへ以降

.s0:    db  "4th stage...", 0x0A, 0x0D, 0
.s1:    db  " A20 Gate Enabled.", 0x0A, 0x0D, 0

.key:   dw  0

;************************************************
;   ブート処理の第5ステージ
;************************************************
stage_5:
        ;----------------------------------
        ; 文字列を表示
        ;----------------------------------
        cdecl   puts, .s0
        
        ;----------------------------------
        ; カーネルを読み込む
        ;----------------------------------
        cdecl   read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END

        cmp     ax, KERNEL_SECT
.10Q:   jz      .10E
.10T:   cdecl   puts, .e0
        call    reboot
.10E:

        ;----------------------------------
        ; 処理の終了
        ;----------------------------------
        jmp     $

.s0:    db  "5th stage...", 0x0A, 0x0D, 0
.e0:    db  "Failure load kernel...", 0x0A, 0x0D, 0

;************************************************
;   パディング
;************************************************
        times BOOT_SIZE - ($ - $$)     db  0   ; パディング