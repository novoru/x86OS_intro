     1                                  ;************************************************
     2                                  ;   マクロ
     3                                  ;************************************************
     4                                  %include    "../include/define.s"
     1                              <1>     BOOT_LOAD       equ     0x7C00
     2                              <1>     BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     3                              <1> 
     4                              <1>     BOOT_SIZE       equ     (1024 * 8)
     5                              <1>     SECT_SIZE       equ     (512)
     6                              <1>     BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)
     7                              <1> 
     8                              <1>     E820_RECORD_SIZE    equ     20
     9                              <1> 
    10                              <1>     KERNEL_LOAD     equ     0x0010_1000
    11                              <1>     KERNEL_SIZE     equ     (1024 * 8)      ; カーネルサイズ
    12                              <1>     KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1>     VECT_BASE       equ     0x0010_0000     ; 0010_0000:0010_07FF
    15                              <1> 
    16                              <1>     STACK_BASE      equ     0x0010_3000
    17                              <1>     STACK_SIZE      equ     1024
    18                              <1> 
    19                              <1>     SP_TASK_0       equ     STACK_BASE + (STACK_SIZE * 1)
    20                              <1>     SP_TASK_1       equ     STACK_BASE + (STACK_SIZE * 2)
     5                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep    %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate - 1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> %macro  set_vect 1-*
    18                              <1>         push    eax
    19                              <1>         push    edi
    20                              <1> 
    21                              <1>         mov     edi, VECT_BASE + (%1 * 8)
    22                              <1>         mov     eax, %2
    23                              <1> 
    24                              <1>         mov     [edi + 0], ax
    25                              <1>         shr     eax, 16
    26                              <1>         mov     [edi + 6], ax
    27                              <1> 
    28                              <1>         pop     edi
    29                              <1>         pop     eax
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> %macro  outp 2
    33                              <1>         mov     al, %2
    34                              <1>         out     %1, al
    35                              <1> %endmacro
    36                              <1> 
    37                              <1> %macro  set_desc 2-*
    38                              <1>         push    eax
    39                              <1>         push    edi
    40                              <1> 
    41                              <1>         mov     edi, %1
    42                              <1>         mov     eax, %2
    43                              <1>     %if 3 == %0
    44                              <1>         mov     [edi + 0], %3
    45                              <1>     %endif
    46                              <1> 
    47                              <1>         mov     [edi + 2], ax
    48                              <1>         shr     eax, 16
    49                              <1>         mov     [edi + 4], al
    50                              <1>         mov     [edi + 7], ah
    51                              <1> 
    52                              <1>         pop     edi
    53                              <1>         pop     eax
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro  set_gate 2-*
    57                              <1>         push    eax
    58                              <1>         push    edi
    59                              <1> 
    60                              <1>         mov     edi, %1
    61                              <1>         mov     eax, %2
    62                              <1> 
    63                              <1>         mov     [edi + 0], ax
    64                              <1>         shr     eax, 16
    65                              <1>         mov     [edi + 6], ax
    66                              <1>         
    67                              <1>         pop     edi
    68                              <1>         pop     eax
    69                              <1> %endmacro
    70                              <1> 
    71                              <1> struc drive
    72 00000000 <res 00000002>      <1>         .no     resw    1           ; ドライブ番号
    73 00000002 <res 00000002>      <1>         .cyln   resw    1           ; シリンダ
    74 00000004 <res 00000002>      <1>         .head   resw    1           ; ヘッド
    75 00000006 <res 00000002>      <1>         .sect   resw    1           ; セクタ
    76                              <1> endstruc
    77                              <1> 
    78                              <1> %define     RING_ITEM_SIZE      (1 << 4)
    79                              <1> %define     RING_INDEX_MASK     (RING_ITEM_SIZE - 1)
    80                              <1> 
    81                              <1> struc ring_buff
    82 00000000 <res 00000004>      <1>         .rp     resd    1
    83 00000004 <res 00000004>      <1>         .wp     resd    1
    84 00000008 <res 00000010>      <1>         .item   resb    RING_ITEM_SIZE
    85                              <1> endstruc
     6                                  
     7                                      ORG     BOOT_LOAD                   ; ロードアドレスをアセンブラに指示
     8                                  
     9                                  ;************************************************
    10                                  ;   エントリポイント
    11                                  ;************************************************
    12                                  entry:
    13                                          ;----------------------------------
    14                                          ;  BPB(BIOS Parameter Block)
    15                                          ;----------------------------------
    16 00000000 EB58                            jmp ipl                             ; IPLへジャンプ
    17 00000002 90<rept>                        times   90 - ($ - $$) db 0x90       ;
    18                                  
    19                                          ;----------------------------------
    20                                          ;  IPL(Intial Program Loader)
    21                                          ;----------------------------------
    22                                  ipl:
    23 0000005A FA                              cli                                 ; // 割り込み禁止
    24                                  
    25 0000005B B80000                          mov     ax, 0x0000                  ; AX = 0x0000;
    26 0000005E 8ED8                            mov     ds, ax                      ; DS = 0x0000;
    27 00000060 8EC0                            mov     es, ax                      ; ES = 0x0000;
    28 00000062 8ED0                            mov     ss, ax                      ; SS = 0x0000;
    29 00000064 BC007C                          mov     sp, BOOT_LOAD               ; SP = 0x7C00;
    30                                  
    31 00000067 FB                              sti                                 ; // 割り込み許可
    32                                  
    33 00000068 8816[B800]                      mov     [BOOT + drive.no], dl       ; ブートドライブを保持
    34                                  
    35                                          ;----------------------------------
    36                                          ;  文字列を表示
    37                                          ;----------------------------------
    38 0000006C 68[9900]E84E0083C4-             cdecl   puts, .s0                   ; puts(.s0)
    38 00000074 02                 
    39                                  
    40                                          ;----------------------------------
    41                                          ;  残りのセクタをすべて読み込む
    42                                          ;----------------------------------
    43 00000075 BB0F00                          mov     bx, BOOT_SECT - 1           ; BX = 残りのブートセクタ数;
    44 00000078 B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE   ; CX = 次のロードアドレス;
    45                                  
    46 0000007B 515368[B800]E89B00-             cdecl   read_chs, BOOT, bx, cx      ; AX = read_chr(.chs, bx, cx);
    46 00000083 83C406             
    47                                  
    48 00000086 39D8                            cmp     ax, bx                      ; if(AX != 残りのセクタ数)
    49 00000088 730C                    .10Q:   jnc     .10E                        ; {
    50 0000008A 68[A600]E8300083C4-     .10T:   cdecl   puts, .e0                   ;    puts(.e0);
    50 00000092 02                 
    51 00000093 E84900                          call    reboot                      ;    reboot();      // 再起動
    52                                  .10E:                                       ; }
    53                                  
    54                                          ;----------------------------------
    55                                          ;  次のステージへ以降
    56                                          ;----------------------------------
    57 00000096 E9D505                          jmp     stage_2
    58                                  
    59                                          ;----------------------------------
    60                                          ;  データ
    61                                          ;----------------------------------
    62 00000099 426F6F74696E672E2E-     .s0     db  "Booting...", 0x0A, 0x0D, 0
    62 000000A2 2E0A0D00           
    63 000000A6 4572726F723A736563-     .e0     db  "Error:sector read", 0
    63 000000AF 746F72207265616400 
    64                                  
    65                                  ;************************************************
    66                                  ;   ブートドライブに関する情報
    67                                  ;************************************************
    68                                  ALIGN 2, db 0
    69                                  BOOT:                                           ; ブートドライブに関する情報
    70                                          istruc  drive
    71 000000B8 0000                                at  drive.no,       dw 0            ; ドライブ番号
    72 000000BA 0000                                at  drive.cyln,     dw 0            ; C: シリンダ
    73 000000BC 0000                                at  drive.head,     dw 0            ; H: ヘッド
    74 000000BE 0200                                at  drive.sect,     dw 2            ; S: セクタ
    75                                          iend
    76                                  
    77                                  ;************************************************
    78                                  ;   モジュール
    79                                  ;************************************************
    80                                  %include "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1>     ;---------------------------------
     3                              <1>     ;   スタックフレームの構築
     4                              <1>     ;---------------------------------
     5                              <1>                                         ;   BP+ 4| 文字列へのアドレス
     6 000000C0 55                  <1>     push    bp                          ;   BP+ 2| IP(戻り番地)
     7 000000C1 89E5                <1>     mov     bp, sp                      ;   BP+ 0| BP(元の値)
     8                              <1>                                         ;  ------+------
     9                              <1> 
    10                              <1>     ;---------------------------------
    11                              <1>     ;   レジスタの保存
    12                              <1>     ;---------------------------------
    13 000000C3 50                  <1>     push    ax
    14 000000C4 53                  <1>     push    bx
    15 000000C5 56                  <1>     push    si
    16                              <1> 
    17                              <1>     ;---------------------------------
    18                              <1>     ;   引数の取得
    19                              <1>     ;---------------------------------
    20 000000C6 8B7604              <1>     mov     si, [bp + 4]                ; SI = 文字列へのアドレス;
    21                              <1> 
    22                              <1>     ;---------------------------------
    23                              <1>     ;   処理の開始
    24                              <1>     ;---------------------------------
    25 000000C9 B40E                <1>     mov ah, 0x0E                        ; テレタイプ式1文字出力
    26 000000CB BB0000              <1>     mov bx, 0x0000                      ; ページ番号と文字色を0に設定
    27 000000CE FC                  <1>     cld                                 ; DF = 0; // アドレス加算
    28                              <1> .10L:                                   ; do
    29                              <1>                                         ; {
    30 000000CF AC                  <1>     lodsb                               ;   AL = *SI++;
    31                              <1>                                         ;
    32 000000D0 3C00                <1>     cmp     al, 0                       ;   if(0 == AL);
    33 000000D2 7404                <1>     je      .10E                        ;     break;
    34                              <1>                                         ;
    35 000000D4 CD10                <1>     int     0x10                        ;   Int10(0x0E, AL) // 文字列出力
    36 000000D6 EBF7                <1>     jmp     .10L                        ;
    37                              <1> .10E:                                   ; } while(1);
    38                              <1> 
    39                              <1>     ;---------------------------------
    40                              <1>     ;   レジスタの復帰
    41                              <1>     ;---------------------------------
    42 000000D8 5E                  <1>     pop si
    43 000000D9 5B                  <1>     pop bx
    44 000000DA 58                  <1>     pop ax
    45                              <1> 
    46                              <1>     ;---------------------------------
    47                              <1>     ;   スタックフレームの破棄
    48                              <1>     ;---------------------------------
    49 000000DB 89EC                <1>     mov sp, bp
    50 000000DD 5D                  <1>     pop bp
    51                              <1> 
    52 000000DE C3                  <1>     ret
    81                                  %include "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1>         ;------------------------------------
     3                              <1>         ; メッセージを表示
     4                              <1>         ;------------------------------------
     5                              <1> 
     6 000000DF 68[FB00]E8DBFF83C4- <1>         cdecl   puts, .s0
     6 000000E7 02                  <1>
     7                              <1> 
     8                              <1>         ;------------------------------------
     9                              <1>         ; キー入力待ち
    10                              <1>         ;------------------------------------
    11                              <1> .10L:
    12                              <1> 
    13 000000E8 B410                <1>         mov     ah, 0x10
    14 000000EA CD16                <1>         int     0x16
    15                              <1> 
    16 000000EC 3C20                <1>         cmp     al, ' '
    17 000000EE 75F8                <1>         jne     .10L
    18                              <1> 
    19                              <1>         ;------------------------------------
    20                              <1>         ; 開業を出力
    21                              <1>         ;------------------------------------
    22 000000F0 68[1901]E8CAFF83C4- <1>         cdecl   puts, .s1
    22 000000F8 02                  <1>
    23                              <1> 
    24                              <1>         ;------------------------------------
    25                              <1>         ; 再起動
    26                              <1>         ;------------------------------------
    27 000000F9 CD19                <1>         int     0x19
    28                              <1> 
    29                              <1>         ;------------------------------------
    30                              <1>         ; 文字列データ
    31                              <1>         ;------------------------------------
    32 000000FB 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    32 00000104 414345206B65792074- <1>
    32 0000010D 6F207265626F6F742E- <1>
    32 00000116 2E2E00              <1>
    33 00000119 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    82                                  %include "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>         ;----------------------------------
     3                              <1>         ; スタックフレームの構築
     4                              <1>         ;----------------------------------
     5                              <1>                                             ;    + 8| コピー先
     6                              <1>                                             ;    + 6| セクタ数
     7                              <1>                                             ;    + 4| パラメータバッファ
     8                              <1>                                             ; ------+--------------
     9                              <1>                                             ;    + 2| IP(戻り番地)
    10 0000011E 55                  <1>         push    bp                          ;  BP+ 0| BP(元の値)
    11 0000011F 89E5                <1>         mov     bp, sp                      ; ------+--------------
    12 00000121 6A03                <1>         push    3                           ;    - 2| retry = 3; // リトライ回数
    13 00000123 6A00                <1>         push    0                           ;    - 4| sect  = 0; // 読み込みセクタ数
    14                              <1> 
    15                              <1>         ;----------------------------------
    16                              <1>         ; レジスタの保存
    17                              <1>         ;----------------------------------
    18 00000125 53                  <1>         push    bx
    19 00000126 51                  <1>         push    cx
    20 00000127 52                  <1>         push    dx
    21 00000128 06                  <1>         push    es
    22 00000129 56                  <1>         push    si
    23                              <1> 
    24                              <1>         ;----------------------------------
    25                              <1>         ; 処理の開始
    26                              <1>         ;----------------------------------
    27 0000012A 8B7604              <1>         mov     si, [bp + 4]
    28                              <1> 
    29                              <1>         ;----------------------------------
    30                              <1>         ; CXレジスタの設定
    31                              <1>         ; (BIOSコールの呼び出しに適した型氏に変換)
    32                              <1>         ;----------------------------------
    33 0000012D 8A6C02              <1>         mov     ch, [si + drive.cyln + 0]
    34 00000130 8A4C03              <1>         mov     cl, [si + drive.cyln + 1]
    35 00000133 C0E106              <1>         shl     cl, 6
    36 00000136 0A4C06              <1>         or      cl, [si + drive.sect]
    37                              <1> 
    38                              <1>         ;----------------------------------
    39                              <1>         ; セクタ読み込み
    40                              <1>         ;----------------------------------
    41 00000139 8A7404              <1>         mov     dh, [si + drive.head]
    42 0000013C 8A14                <1>         mov     dl, [si + 0]
    43 0000013E B80000              <1>         mov     ax, 0x0000
    44 00000141 8EC0                <1>         mov     es, ax
    45 00000143 8B5E08              <1>         mov     bx, [bp + 8]
    46                              <1> .10L:
    47                              <1> 
    48 00000146 B402                <1>         mov     ah, 0x02
    49 00000148 8A4606              <1>         mov     al, [bp + 6]
    50                              <1> 
    51 0000014B CD13                <1>         int     0x13
    52 0000014D 7304                <1>         jnc     .11E
    53                              <1> 
    54 0000014F B000                <1>         mov     al, 0
    55 00000151 EB0C                <1>         jmp     .10E
    56                              <1> .11E:
    57                              <1> 
    58 00000153 3C00                <1>         cmp     al, 0
    59 00000155 7508                <1>         jne     .10E
    60                              <1> 
    61 00000157 B80000              <1>         mov     ax, 0
    62 0000015A FF4EFE              <1>         dec     word [bp - 2]
    63 0000015D 75E7                <1>         jnz     .10L
    64                              <1> .10E:
    65 0000015F B400                <1>         mov     ah, 0
    66                              <1> 
    67                              <1>         ;----------------------------------
    68                              <1>         ; レジスタの復帰
    69                              <1>         ;----------------------------------
    70 00000161 5E                  <1>         pop     si
    71 00000162 07                  <1>         pop     es
    72 00000163 5A                  <1>         pop     dx
    73 00000164 59                  <1>         pop     cx
    74 00000165 5B                  <1>         pop     bx
    75                              <1> 
    76                              <1>         ;----------------------------------
    77                              <1>         ; スタックフレームの破棄
    78                              <1>         ;----------------------------------
    79 00000166 89EC                <1>         mov     sp, bp
    80 00000168 5D                  <1>         pop     bp
    81                              <1> 
    82 00000169 C3                  <1>         ret
    83                                  
    84                                  ;************************************************
    85                                  ;   ブートフラグ(先頭512バイトの終了)
    86                                  ;************************************************
    87 0000016A 00<rept>                    times   510 - ($ - $$) db 0x00
    88 000001FE 55AA                        db  0x55, 0xAA
    89                                  
    90                                  ;************************************************
    91                                  ;   リアルモード時に取得した情報
    92                                  ;************************************************
    93                                  FONT:                                           ; フォント
    94 00000200 0000                    .seg:   dw  0
    95 00000202 0000                    .off:   dw  0
    96                                  ACPI_DATA:                                      ; ACPI data
    97 00000204 00000000                .adr:   dd  0                                   ; ACPI data address
    98 00000208 00000000                .len:   dd  0                                   ; ACPI data length
    99                                  
   100                                  ;************************************************
   101                                  ;   モジュール(先頭512バイト以降に配置)
   102                                  ;************************************************
   103                                  %include "../modules/real/itoa.s"
     1                              <1> itoa:
     2                              <1>         ;------------------------------------------
     3                              <1>         ; スタックフレームの構築
     4                              <1>         ;------------------------------------------
     5                              <1>                                                     ;     +12| BP(元の値)
     6                              <1>                                                     ;     +10| BP(元の値)
     7                              <1>                                                     ;     + 8| BP(元の値)
     8                              <1>                                                     ;     + 6| BP(元の値)
     9                              <1>                                                     ;     + 4| BP(元の値)
    10                              <1>                                                     ;     + 2| IP(戻り番地)
    11 0000020C 55                  <1>         push    bp                                  ;   BP+ 0| BP(元の値)
    12 0000020D 89E5                <1>         mov     bp, sp                              ; -------+-------------
    13                              <1> 
    14                              <1>         ;------------------------------------------
    15                              <1>         ; レジスタの保存
    16                              <1>         ;------------------------------------------
    17 0000020F 50                  <1>         push    ax
    18 00000210 53                  <1>         push    bx
    19 00000211 51                  <1>         push    cx
    20 00000212 52                  <1>         push    dx
    21 00000213 56                  <1>         push    si
    22 00000214 57                  <1>         push    di
    23                              <1> 
    24                              <1>         ;------------------------------------------
    25                              <1>         ; 引数を取得
    26                              <1>         ;------------------------------------------
    27 00000215 8B4604              <1>         mov     ax, [bp + 4]                        ; val   = 数値;
    28 00000218 8B7606              <1>         mov     si, [bp + 6]                        ; dst   = バッファアドレス;
    29 0000021B 8B4E08              <1>         mov     cx, [bp + 8]                        ; size  = 残りバッファサイズ; 
    30                              <1>         
    31 0000021E 89F7                <1>         mov     di, si                              ; // バッファの最後尾
    32 00000220 01CF                <1>         add     di, cx                              ; dst = &dst[size - 1];
    33 00000222 4F                  <1>         dec     di                                  ;
    34                              <1> 
    35 00000223 8B5E0C              <1>         mov     bx, word [bp + 12]                  ; flags = オプション;
    36                              <1> 
    37                              <1>         ;------------------------------------------
    38                              <1>         ; 符号付き判定
    39                              <1>         ;------------------------------------------
    40 00000226 F7C30100            <1>         test    bx, 0b0001                          ; if(flags & 0x01)  // 符号付き
    41 0000022A 7408                <1> .10Q:   je      .10E                                ; {
    42 0000022C 83F800              <1>         cmp     ax, 0                               ;   if(val < 0)
    43 0000022F 7D03                <1> .12Q:   jge     .12E                                ;   {
    44 00000231 83CB02              <1>         or      bx, 0b0010                          ;      flags |= 2;  // 符号表示
    45                              <1> .12E:                                               ;   }
    46                              <1> .10E:                                               ; }
    47                              <1> 
    48                              <1>         ;------------------------------------------
    49                              <1>         ; 符号出力判定
    50                              <1>         ;------------------------------------------
    51 00000234 F7C31A27            <1>         test    bx, 010010                          ; if(flags & 0x02)  // 符号出力判定
    52 00000238 7410                <1> .20Q:   je      .20E                                ; {
    53 0000023A 83F800              <1>         cmp     ax, 0                               ;    if(val < 0)
    54 0000023D 7D07                <1> .22Q:   jge     .22F                                ;    {
    55 0000023F F7D8                <1>         neg     ax                                  ;       val *= -1;  // 符号判定
    56 00000241 C6042D              <1>         mov     [si], byte '-'                      ;       *dst = '-'; // 符号表示
    57 00000244 EB03                <1>         jmp     .22E                                ;    }
    58                              <1> .22F:                                               ;    else
    59                              <1>                                                     ;    {
    60 00000246 C6042B              <1>         mov     [si], byte '+'                      ;       *dst = '+';    // 符号表示
    61                              <1> .22E:                                               ;    }
    62 00000249 49                  <1>         dec     cx                                  ;    size--;           // 残りバッファサイズの減算
    63                              <1> .20E:                                               ; }
    64                              <1> 
    65                              <1>         ;------------------------------------------
    66                              <1>         ; ASCII変換
    67                              <1>         ;------------------------------------------
    68 0000024A 8B5E0A              <1>         mov     bx, [bp + 10]                       ; BX = 基数;
    69                              <1> .30L:                                               ; do
    70                              <1>                                                     ; {
    71 0000024D BA0000              <1>         mov     dx, 0                               ;
    72 00000250 F7F3                <1>         div     bx                                  ;   DX = DX:AX % 基数;
    73                              <1>                                                     ;   AX = DX:AX / 基数;
    74                              <1>                                                     ;
    75 00000252 89D6                <1>         mov     si, dx                              ;   // テーブル参照
    76 00000254 8A94[7C02]          <1>         mov     dl, byte [.ascii + si]              ;   DL = ASCII[DX];
    77                              <1>                                                     ;
    78 00000258 8815                <1>         mov     [di], dl                            ;   *dst = DL;
    79 0000025A 4F                  <1>         dec     di                                  ;   dst--;
    80                              <1>                                                     ;
    81 0000025B 83F800              <1>         cmp     ax, 0                               ;
    82 0000025E E0ED                <1>         loopnz  .30L                                ; } while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;------------------------------------------
    86                              <1>         ; 空欄を埋める
    87                              <1>         ;------------------------------------------
    88 00000260 83F900              <1>         cmp     cx, 0                               ; if(size)
    89 00000263 740D                <1> .40Q:   je      .40E                                ; {
    90 00000265 B020                <1>         mov     al, ' '                             ;   AL = ' ';   // ' 'で埋める(デフォルト値)
    91 00000267 837E0C04            <1>         cmp     [bp + 12], word 0b0100              ;   if(flags & 0x04)
    92 0000026B 7502                <1> .42Q:   jne     .42E                                ;   {
    93 0000026D B030                <1>         mov     al, '0'                             ;       AL = '0';
    94                              <1> .42E:                                               ;   }
    95 0000026F FD                  <1>         std                                         ;   // DF = 1(-方向)
    96 00000270 F3AA                <1>         rep     stosb                               ;   while(--CX) *DI -- = ' ';
    97                              <1> .40E:                                               ; }
    98                              <1> 
    99                              <1>         ;------------------------------------------
   100                              <1>         ; レジスタの復帰
   101                              <1>         ;------------------------------------------
   102 00000272 5F                  <1>         pop     di
   103 00000273 5E                  <1>         pop     si
   104 00000274 5A                  <1>         pop     dx
   105 00000275 59                  <1>         pop     cx
   106 00000276 5B                  <1>         pop     bx
   107 00000277 58                  <1>         pop     ax
   108                              <1> 
   109                              <1>         ;------------------------------------------
   110                              <1>         ; スタックフレームの破棄
   111                              <1>         ;------------------------------------------
   112 00000278 89EC                <1>         mov     sp, bp
   113 0000027A 5D                  <1>         pop     bp
   114                              <1> 
   115 0000027B C3                  <1>         ret
   116                              <1> 
   117 0000027C 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"                  ; 変換テーブル
   117 00000285 39414243444546      <1>
   104                                  %include "../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1>         ;----------------------------------
     3                              <1>         ; スタックフレームの構築
     4                              <1>         ;----------------------------------
     5                              <1>                                             ;    + 4| パラメータバッファ
     6                              <1>                                             ;    + 2| IP(戻り番地)
     7 0000028C 55                  <1>         push    bp                          ;  BP+ 0| BP(元の値)
     8 0000028D 89E5                <1>         mov     bp, sp                      ; ------+----------
     9                              <1> 
    10                              <1>         ;----------------------------------
    11                              <1>         ; レジスタの保存
    12                              <1>         ;----------------------------------
    13 0000028F 53                  <1>         push    bx
    14 00000290 51                  <1>         push    cx
    15 00000291 06                  <1>         push    es
    16 00000292 56                  <1>         push    si
    17 00000293 57                  <1>         push    di
    18                              <1> 
    19                              <1>         ;----------------------------------
    20                              <1>         ; 処理の開始
    21                              <1>         ;----------------------------------
    22 00000294 8B7604              <1>         mov     si, [bp + 4]                ; SI = バッファ;
    23                              <1> 
    24 00000297 B80000              <1>         mov     ax, 0                       ; Disk Base Table Pointerの初期化
    25 0000029A 8EC0                <1>         mov     es, ax                      ; ES = 0;
    26 0000029C 89C7                <1>         mov     di, ax                      ; DI = 0;
    27                              <1> 
    28 0000029E B408                <1>         mov     ah, 8                       ; // get drive paramters
    29 000002A0 8A14                <1>         mov     dl, [si + drive.no]         ; DL = ドライブ番号;
    30 000002A2 CD13                <1>         int     0x13                        ; CF = BIOS(0x13, 8);
    31 000002A4 721B                <1> .10Q:   jc      .10F                        ; if(0 == CF)
    32                              <1> .10T:                                       ; {
    33 000002A6 88C8                <1>         mov     al, cl                      ;   AX = セクタ数;
    34 000002A8 83E03F              <1>         and     ax, 0x3F                    ;   // 下位6ビットのみで有効
    35                              <1> 
    36 000002AB C0E906              <1>         shr     cl, 6                       ;   CX = シリンダ数;
    37 000002AE C1C908              <1>         ror     cx, 8                       ;
    38 000002B1 41                  <1>         inc     cx                          ;
    39                              <1> 
    40 000002B2 0FB6DE              <1>         movzx   bx, dh                      ;   BX = ヘッド数(1ベース);
    41 000002B5 43                  <1>         inc     bx                          ;
    42                              <1> 
    43 000002B6 894C02              <1>         mov     [si + drive.cyln], cx       ;   drive.syln = CX;    // C:シリンダ数
    44 000002B9 895C04              <1>         mov     [si + drive.head], bx       ;   drive.head = BX;    // H:ヘッド数
    45 000002BC 894406              <1>         mov     [si + drive.sect], ax       ;   drive.sect = AX;    // S:シリンダ数
    46                              <1> 
    47 000002BF EB03                <1>         jmp     .10E                        ; }
    48                              <1> .10F:                                       ; else
    49                              <1>                                             ; {
    50 000002C1 B80000              <1>         mov     ax, 0                       ;   AX = 0;     // 失敗
    51                              <1> .10E:                                       ; }
    52                              <1> 
    53                              <1>         ;----------------------------------
    54                              <1>         ; レジスタの復帰
    55                              <1>         ;----------------------------------
    56 000002C4 5F                  <1>         pop     di
    57 000002C5 5E                  <1>         pop     si
    58 000002C6 07                  <1>         pop     es
    59 000002C7 59                  <1>         pop     cx
    60 000002C8 5B                  <1>         pop     bx
    61                              <1> 
    62                              <1>         ;----------------------------------
    63                              <1>         ; スタックフレームの破棄
    64                              <1>         ;----------------------------------
    65 000002C9 89EC                <1>         mov     sp, bp
    66 000002CB 5D                  <1>         pop     bp
    67                              <1> 
    68 000002CC C3                  <1>         ret
   105                                  %include "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1>         ;----------------------------------
     3                              <1>         ; スタックフレームの構築
     4                              <1>         ;----------------------------------
     5                              <1>                                             ;    + 4| フォントアドレス格納位置
     6                              <1>                                             ;    + 2| IP(戻り番地)
     7 000002CD 55                  <1>         push    bp                          ;  BP+ 0| BP(元の値)
     8 000002CE 89E5                <1>         mov     bp, sp                      ; ------+------------
     9                              <1> 
    10                              <1>         ;----------------------------------
    11                              <1>         ; レジスタの保存
    12                              <1>         ;----------------------------------
    13 000002D0 50                  <1>         push    ax
    14 000002D1 53                  <1>         push    bx
    15 000002D2 56                  <1>         push    si
    16 000002D3 06                  <1>         push    es
    17 000002D4 55                  <1>         push    bp
    18                              <1> 
    19                              <1>         ;----------------------------------
    20                              <1>         ; 引数を取得
    21                              <1>         ;----------------------------------
    22 000002D5 8B7604              <1>         mov     si, [bp + 4]                ; dst = FONTアドレスの保存先;
    23                              <1> 
    24                              <1>         ;----------------------------------
    25                              <1>         ; フォントアドレスの取得
    26                              <1>         ;----------------------------------
    27 000002D8 B83011              <1>         mov     ax, 0x1130                  ; // フォントアドレスの取得
    28 000002DB B706                <1>         mov     bh, 0x06                    ; 8x16 font (vga/mcga)
    29 000002DD CD10                <1>         int     10h                         ; ES:BP = FONT ADDRESS
    30                              <1> 
    31                              <1>         ;----------------------------------
    32                              <1>         ; FONTアドレスを保存
    33                              <1>         ;----------------------------------
    34 000002DF 8C04                <1>         mov     [si + 0], es                ; dst[0] = セグメント;
    35 000002E1 896C02              <1>         mov     [si + 2], bp                ; dst[1] = オフセット;
    36                              <1> 
    37                              <1>         ;----------------------------------
    38                              <1>         ; レジスタの復帰
    39                              <1>         ;----------------------------------
    40 000002E4 5D                  <1>         pop     bp
    41 000002E5 07                  <1>         pop     es
    42 000002E6 5E                  <1>         pop     si
    43 000002E7 5B                  <1>         pop     bx
    44 000002E8 58                  <1>         pop     ax
    45                              <1>         
    46                              <1>         ;----------------------------------
    47                              <1>         ; スタックフレームの破棄
    48                              <1>         ;----------------------------------
    49 000002E9 89EC                <1>         mov     sp, bp
    50 000002EB 5D                  <1>         pop     bp
    51                              <1> 
    52 000002EC C3                  <1>         ret
   106                                  %include "../modules/real/get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1>         ;----------------------------------
     3                              <1>         ; レジスタの保存
     4                              <1>         ;----------------------------------
     5 000002ED 6650                <1>         push    eax
     6 000002EF 6653                <1>         push    ebx
     7 000002F1 6651                <1>         push    ecx
     8 000002F3 6652                <1>         push    edx
     9 000002F5 56                  <1>         push    si
    10 000002F6 57                  <1>         push    di
    11 000002F7 55                  <1>         push    bp
    12                              <1> 
    13                              <1>         ;----------------------------------
    14                              <1>         ; 処理の開始
    15                              <1>         ;----------------------------------
    16 000002F8 68[8C03]E8C2FD83C4- <1>         cdecl   puts, .s0                   ; // ヘッダを表示
    16 00000300 02                  <1>
    17                              <1> 
    18 00000301 BD0000              <1>         mov     bp, 0                       ; linse = 0;    // 行数
    19 00000304 66BB00000000        <1>         mov     ebx, 0                      ; index = 0;    // インデックスを初期化
    20                              <1> .10L:                                       ; do
    21                              <1>                                             ; {
    22 0000030A 66B820E80000        <1>         mov     eax, 0x0000E820             ;   EAX = 0xE820;
    23                              <1>                                             ;   EBX = インデックス;
    24 00000310 66B914000000        <1>         mov     ecx, E820_RECORD_SIZE       ;   ECX = 要求バイト数;
    25 00000316 66BA50414D53        <1>         mov     edx, 'PAMS'                 ;   EDX = 'SMAP';
    26 0000031C BF[1804]            <1>         mov     di, .b0                     ;   ES:DI = バッファ;
    27 0000031F CD15                <1>         int     0x15                        ;   BIOS(0x15, 0xE820);
    28                              <1> 
    29                              <1>         ; コマンドに対応か?
    30 00000321 663D50414D53        <1>         cmp     eax, 'PAMS'                 ;   if('SMAP' != EAX)
    31 00000327 7402                <1>         je      .12E                        ;   {
    32 00000329 EB4C                <1>         jmp     .10E                        ;     break;    // コマンド未対応
    33                              <1> .12E:                                       ;   }
    34                              <1> 
    35                              <1>         ; エラーなし?                        ;   if(CF)
    36 0000032B 7302                <1>         jnc     .14E                        ;   {
    37 0000032D EB48                <1>         jmp     .10E                        ;     break;    // エラー発生
    38                              <1> .14E:                                       ;   }
    39                              <1> 
    40                              <1>         ; 1レコード分のメモリ情報を表示
    41 0000032F 57E8F90083C402      <1>         cdecl   put_mem_info, di            ;   1レコード分のメモリ情報を表示   
    42                              <1> 
    43                              <1>         ; ACPI dataのアドレスを取得
    44 00000336 668B4510            <1>         mov     eax, [di + 16]              ;   EAX = レコードタイプ;
    45 0000033A 6683F803            <1>         cmp     eax, 3                      ;   if(3 == EAX)  // ACPI data
    46 0000033E 750F                <1>         jne     .15E                        ;   {
    47                              <1>                                             ;
    48 00000340 668B05              <1>         mov     eax, [di + 0]               ;      EAX = BASEアドレス;
    49 00000343 66A3[0402]          <1>         mov     [ACPI_DATA.adr], eax        ;      ACPI_DATA.adr = EAX;
    50                              <1>                                             ;
    51 00000347 668B4508            <1>         mov     eax, [di + 8]               ;      EAX = Length;
    52 0000034B 66A3[0802]          <1>         mov     [ACPI_DATA.len], eax        ;      ACPI_DATA.len = EAX;
    53                              <1> .15E:                                       ;   }
    54                              <1> 
    55 0000034F 6683FB00            <1>         cmp     ebx, 0                      ;   if(0 != EBX)
    56 00000353 741C                <1>         jz      .16E                        ;   {
    57                              <1>                                             ;
    58 00000355 45                  <1>         inc     bp                          ;     lines++;
    59 00000356 83E507              <1>         and     bp, 0x07                    ;     lines &= 0x07;
    60 00000359 7516                <1>         jnz     .16E                        ;     if(0 == lines)
    61                              <1>                                             ;     {
    62 0000035B 68[FF03]E85FFD83C4- <1>         cdecl   puts, .s2                   ;       // 中断メッセージを表示
    62 00000363 02                  <1>
    63 00000364 B410                <1>         mov     ah, 0x10                    ;
    64 00000366 CD16                <1>         int     0x16                        ;       // キー入力待ち
    65                              <1>                                             ;
    66 00000368 68[0A04]E852FD83C4- <1>         cdecl   puts, .s3                   ;       // 中断メッセージを消去
    66 00000370 02                  <1>
    67                              <1>                                             ;     }
    68                              <1> .16E:                                       ;    }
    69                              <1>                                             ;
    70 00000371 6683FB00            <1>         cmp     ebx, 0                      ;
    71 00000375 7593                <1>         jne     .10L                        ; }
    72                              <1> .10E:                                       ; while(0 == EBX);
    73                              <1> 
    74 00000377 68[CF03]E843FD83C4- <1>         cdecl   puts, .s1                   ; // フッタを表示
    74 0000037F 02                  <1>
    75                              <1> 
    76                              <1>         ;----------------------------------
    77                              <1>         ; レジスタの復帰
    78                              <1>         ;----------------------------------
    79 00000380 5D                  <1>         pop     bp
    80 00000381 5F                  <1>         pop     di
    81 00000382 5E                  <1>         pop     si
    82 00000383 665A                <1>         pop     edx
    83 00000385 6659                <1>         pop     ecx
    84 00000387 665B                <1>         pop     ebx
    85 00000389 6658                <1>         pop     eax
    86                              <1> 
    87 0000038B C3                  <1>         ret
    88                              <1> 
    89 0000038C 2045383230204D656D- <1> .s0:    db  " E820 Memory Map:", 0x0A, 0x0D
    89 00000395 6F7279204D61703A0A- <1>
    89 0000039E 0D                  <1>
    90 0000039F 20426173655F5F5F5F- <1>         db  " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
    90 000003A8 5F5F5F5F5F5F5F5F5F- <1>
    90 000003B1 204C656E6774685F5F- <1>
    90 000003BA 5F5F5F5F5F5F5F5F5F- <1>
    90 000003C3 20547970655F5F5F5F- <1>
    90 000003CC 0A0D00              <1>
    91 000003CF 202D2D2D2D2D2D2D2D- <1> .s1:	db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
    91 000003D8 2D2D2D2D2D2D2D2D2D- <1>
    91 000003E1 202D2D2D2D2D2D2D2D- <1>
    91 000003EA 2D2D2D2D2D2D2D2D2D- <1>
    91 000003F3 202D2D2D2D2D2D2D2D- <1>
    91 000003FC 0A0D00              <1>
    92 000003FF 203C6D6F72652E2E2E- <1> .s2:    db  " <more...>", 0
    92 00000408 3E00                <1>
    93 0000040A 0D2020202020202020- <1> .s3:    db  0x0D, "          ", 0x0D, 0
    93 00000413 20200D00            <1>
    94                              <1> 
    95 00000417 00                  <1> ALIGN 4, db 0
    96 00000418 00<rept>            <1> .b0:    times E820_RECORD_SIZE db 0
    97                              <1> 
    98                              <1> put_mem_info:
    99                              <1>         ;----------------------------------
   100                              <1>         ; スタックフレームの構築
   101                              <1>         ;----------------------------------
   102                              <1>                                             ;      4| バッファアドレス
   103                              <1>                                             ;      2| IP(戻り番地)
   104 0000042C 55                  <1>         push    bp                          ;  BP+ 0| BP(元の値)
   105 0000042D 89E5                <1>         mov     bp, sp                      ;-------+--------
   106                              <1> 
   107                              <1>         ;----------------------------------
   108                              <1>         ; レジスタの保存
   109                              <1>         ;----------------------------------
   110 0000042F 53                  <1>         push    bx
   111 00000430 56                  <1>         push    si
   112                              <1> 
   113                              <1>         ;----------------------------------
   114                              <1>         ; 引数を取得
   115                              <1>         ;----------------------------------
   116 00000431 8B7604              <1>         mov     si, [bp + 4]                ; SI = バッファアドレス;
   117                              <1> 
   118                              <1>         ;----------------------------------
   119                              <1>         ; レコードの表示
   120                              <1>         ;----------------------------------
   121                              <1> 
   122                              <1>         ; Base(64bit)
   123 00000434 6A046A106A0468-     <1>         cdecl   itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
   123 0000043B [0B05]FF7406E8C9FD- <1>
   123 00000443 83C40A              <1>
   124 00000446 6A046A106A0468-     <1>         cdecl   itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
   124 0000044D [0F05]FF7404E8B7FD- <1>
   124 00000455 83C40A              <1>
   125 00000458 6A046A106A0468-     <1>         cdecl   itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
   125 0000045F [1405]FF7402E8A5FD- <1>
   125 00000467 83C40A              <1>
   126 0000046A 6A046A106A0468-     <1>         cdecl   itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
   126 00000471 [1805]FF34E894FD83- <1>
   126 00000479 C40A                <1>
   127                              <1> 
   128                              <1>         ; Length(64bit)
   129 0000047B 6A046A106A0468-     <1>         cdecl   itoa, word [si + 14], .p4 + 0, 4, 16, 0b0100
   129 00000482 [1D05]FF740EE882FD- <1>
   129 0000048A 83C40A              <1>
   130 0000048D 6A046A106A0468-     <1>         cdecl   itoa, word [si + 12], .p4 + 4, 4, 16, 0b0100
   130 00000494 [2105]FF740CE870FD- <1>
   130 0000049C 83C40A              <1>
   131 0000049F 6A046A106A0468-     <1>         cdecl   itoa, word [si + 10], .p5 + 0, 4, 16, 0b0100
   131 000004A6 [2605]FF740AE85EFD- <1>
   131 000004AE 83C40A              <1>
   132 000004B1 6A046A106A0468-     <1>         cdecl   itoa, word [si +  8], .p5 + 4, 4, 16, 0b0100
   132 000004B8 [2A05]FF7408E84CFD- <1>
   132 000004C0 83C40A              <1>
   133                              <1> 
   134                              <1>         ; Type(64bit)
   135 000004C3 6A046A106A0468-     <1>         cdecl   itoa, word [si + 18], .p6 + 0, 4, 16, 0b0100
   135 000004CA [2F05]FF7412E83AFD- <1>
   135 000004D2 83C40A              <1>
   136 000004D5 6A046A106A0468-     <1>         cdecl   itoa, word [si + 16], .p6 + 4, 4, 16, 0b0100
   136 000004DC [3305]FF7410E828FD- <1>
   136 000004E4 83C40A              <1>
   137                              <1> 
   138 000004E7 68[0A05]E8D3FB83C4- <1>         cdecl   puts, .s1                           ;   // レコード情報を表示
   138 000004EF 02                  <1>
   139                              <1> 
   140 000004F0 8B5C10              <1>         mov     bx, [si + 16]                       ;   // タイプを文字列で表示
   141 000004F3 83E307              <1>         and     bx, 0x07                            ;   BX = Type(0~5)
   142 000004F6 D1E3                <1>         shl     bx, 1                               ;   BX *= 2;    // 要素サイズに変換
   143 000004F8 81C3[8C05]          <1>         add     bx, .t0                             ;   BX += .t0;  // テーブルの先頭アドレスを加算
   144 000004FC FF37E8BFFB83C402    <1>         cdecl   puts, word [bx]                     ;   puts(*BX);
   145                              <1> 
   146                              <1> 
   147                              <1> 
   148                              <1>         ;----------------------------------
   149                              <1>         ; レジスタの復帰
   150                              <1>         ;----------------------------------
   151 00000504 5E                  <1>         pop     si
   152 00000505 5B                  <1>         pop     bx
   153                              <1> 
   154                              <1>         ;----------------------------------
   155                              <1>         ; スタックフレームの破棄
   156                              <1>         ;----------------------------------
   157 00000506 89EC                <1>         mov     sp, bp
   158 00000508 5D                  <1>         pop     bp
   159                              <1> 
   160 00000509 C3                  <1>         ret
   161                              <1> 
   162 0000050A 20                  <1> .s1:    db  " "
   163 0000050B 5A5A5A5A5A5A5A5A5F  <1> .p2:    db  "ZZZZZZZZ_"
   164 00000514 5A5A5A5A5A5A5A5A5F  <1> .p3:    db  "ZZZZZZZZ_"
   165 0000051D 5A5A5A5A5A5A5A5A5F  <1> .p4:    db  "ZZZZZZZZ_"
   166 00000526 5A5A5A5A5A5A5A5A20  <1> .p5:    db  "ZZZZZZZZ "
   167 0000052F 5A5A5A5A5A5A5A5A00  <1> .p6:    db  "ZZZZZZZZ", 0
   168                              <1> 
   169 00000538 2028556E6B6E6F776E- <1> .s4:    db  " (Unknown)", 0x0A, 0x0D, 0
   169 00000541 290A0D00            <1>
   170 00000545 2028757361626C6529- <1> .s5:    db  " (usable)", 0x0A, 0x0D, 0
   170 0000054E 0A0D00              <1>
   171 00000551 202872657365727665- <1> .s6:    db  " (reserved)", 0x0A, 0x0D, 0
   171 0000055A 64290A0D00          <1>
   172 0000055F 202841435049206461- <1> .s7:    db  " (ACPI data)", 0x0A, 0x0D, 0
   172 00000568 7461290A0D00        <1>
   173 0000056E 202841435049204E56- <1> .s8:    db  " (ACPI NVS)", 0x0A, 0x0D, 0
   173 00000577 53290A0D00          <1>
   174 0000057C 2028626164206D656D- <1> .s9:    db  " (bad memory)", 0x0A, 0x0D, 0
   174 00000585 6F7279290A0D00      <1>
   175                              <1> 
   176 0000058C [3805][4505][5105]- <1> .t0:    dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   176 00000592 [5F05][6E05][7C05]- <1>
   176 00000598 [3805][3805]        <1>
   107                                  %include "../modules/real/kbc.s"
     1                              <1> KBC_Data_Write:
     2                              <1>         ;------------------------------------------
     3                              <1>         ; スタックフレームの構築
     4                              <1>         ;------------------------------------------
     5                              <1>                                                     ;   + 4| データ
     6                              <1>                                                     ;   + 2| IP(戻り番地)
     7 0000059C 55                  <1>         push    bp                                  ; BP+ 0| BP(元の値)
     8 0000059D 89E5                <1>         mov     bp, sp                              ; -----+------------ 
     9                              <1> 
    10                              <1>         ;------------------------------------------
    11                              <1>         ; レジスタの保存
    12                              <1>         ;------------------------------------------
    13 0000059F 51                  <1>         push    cx
    14                              <1> 
    15 000005A0 B90000              <1>         mov     cx, 0                               ; CX = 0;   // 最大カウント数
    16                              <1> .10L:                                               ; do
    17                              <1>                                                     ; {
    18 000005A3 E464                <1>         in      al, 0x64                            ; AL = inp(0x64);   // KBCステータス
    19 000005A5 A802                <1>         test    al, 0x02                            ; ZF = AL & 0x02;   // 書き込み可能?
    20 000005A7 E0FA                <1>         loopnz  .10L                                ; } while(--CX && !ZF);
    21                              <1> 
    22 000005A9 83F900              <1>         cmp     cx, 0                               ; if(CX)    // 未タイムアウト
    23 000005AC 7405                <1>         jz      .20E                                ; {
    24                              <1>                                                     ;
    25 000005AE 8A4604              <1>         mov     al, [bp + 4]                        ;   AL = データ;
    26 000005B1 E660                <1>         out     0x60, al                            ;   outp(0x60, AL);
    27                              <1> .20E:                                               ; }
    28                              <1> 
    29 000005B3 89C8                <1>         mov     ax, cx                              ; return CX;
    30                              <1> 
    31                              <1>         ;------------------------------------------
    32                              <1>         ; レジスタの復帰
    33                              <1>         ;------------------------------------------
    34 000005B5 59                  <1>         pop     cx
    35                              <1> 
    36                              <1>         ;------------------------------------------
    37                              <1>         ; スタックフレームの破棄
    38                              <1>         ;------------------------------------------
    39 000005B6 89EC                <1>         mov     sp, bp
    40 000005B8 5D                  <1>         pop     bp
    41                              <1> 
    42 000005B9 C3                  <1>         ret
    43                              <1> 
    44                              <1> KBC_Data_Read:
    45                              <1>         ;------------------------------------------
    46                              <1>         ; スタックフレームの構築
    47                              <1>         ;------------------------------------------
    48                              <1>                                                     ;   + 4| データ
    49                              <1>                                                     ;   + 2| IP(戻り番地)
    50 000005BA 55                  <1>         push    bp                                  ; BP+ 0| BP(元の値)
    51 000005BB 89E5                <1>         mov     bp, sp                              ; -----+------------ 
    52                              <1> 
    53                              <1>         ;------------------------------------------
    54                              <1>         ; レジスタの保存
    55                              <1>         ;------------------------------------------
    56 000005BD 51                  <1>         push    cx
    57 000005BE 57                  <1>         push    di
    58                              <1> 
    59 000005BF B90000              <1>         mov     cx, 0                               ; CX = 0;   // 最大カウント数
    60                              <1> .10L:                                               ; do
    61                              <1>                                                     ; {
    62 000005C2 E464                <1>         in      al, 0x64                            ; AL = inp(0x64);   // KBCステータス
    63 000005C4 A801                <1>         test    al, 0x01                            ; ZF = AL & 0x01;   // 読み込み可能?
    64 000005C6 E1FA                <1>         loopz   .10L                                ; } while(--CX && !ZF);
    65                              <1> 
    66 000005C8 83F900              <1>         cmp     cx, 0                               ; if(CX)    // 未タイムアウト
    67 000005CB 7409                <1>         jz      .20E                                ; {
    68                              <1>                                                     ;
    69 000005CD B400                <1>         mov     ah, 0x00                            ;   AH = 0x00;
    70 000005CF E460                <1>         in      al, 0x60                            ;   AL = inp(0x60); // データ取得
    71                              <1> 
    72 000005D1 8B7E04              <1>         mov     di, [bp + 4]                        ;   DI = ptr;
    73 000005D4 8905                <1>         mov     [di + 0], ax                        ;   DI[0] = AX;
    74                              <1> .20E:                                               ; }
    75                              <1> 
    76 000005D6 89C8                <1>         mov     ax, cx                              ; return CX;
    77                              <1> 
    78                              <1>         ;------------------------------------------
    79                              <1>         ; レジスタの復帰
    80                              <1>         ;------------------------------------------
    81 000005D8 5F                  <1>         pop     di
    82 000005D9 59                  <1>         pop     cx
    83                              <1> 
    84                              <1>         ;------------------------------------------
    85                              <1>         ; スタックフレームの破棄
    86                              <1>         ;------------------------------------------
    87 000005DA 89EC                <1>         mov     sp, bp
    88 000005DC 5D                  <1>         pop     bp
    89                              <1> 
    90 000005DD C3                  <1>         ret
    91                              <1> 
    92                              <1> KBC_Cmd_Write:
    93                              <1>         ;------------------------------------------
    94                              <1>         ; スタックフレームの構築
    95                              <1>         ;------------------------------------------
    96                              <1>                                                     ;   + 4| データ
    97                              <1>                                                     ;   + 2| IP(戻り番地)
    98 000005DE 55                  <1>         push    bp                                  ; BP+ 0| BP(元の値)
    99 000005DF 89E5                <1>         mov     bp, sp                              ; -----+------------ 
   100                              <1> 
   101                              <1>         ;------------------------------------------
   102                              <1>         ; レジスタの保存
   103                              <1>         ;------------------------------------------
   104 000005E1 51                  <1>         push    cx
   105                              <1> 
   106 000005E2 B90000              <1>         mov     cx, 0                               ; CX = 0;   // 最大カウント数
   107                              <1> .10L:                                               ; do
   108                              <1>                                                     ; {
   109 000005E5 E464                <1>         in      al, 0x64                            ; AL = inp(0x64);   // KBCステータス
   110 000005E7 A802                <1>         test    al, 0x02                            ; ZF = AL & 0x02;   // 書き込み可能?
   111 000005E9 E0FA                <1>         loopnz  .10L                                ; } while(--CX && !ZF);
   112                              <1> 
   113 000005EB 83F900              <1>         cmp     cx, 0                               ; if(CX)    // 未タイムアウト
   114 000005EE 7405                <1>         jz      .20E                                ; {
   115                              <1>                                                     ;
   116 000005F0 8A4604              <1>         mov     al, [bp + 4]                        ;   AL = データ;
   117 000005F3 E664                <1>         out     0x64, al                            ;   outp(0x64, AL);
   118                              <1> .20E:                                               ; }
   119                              <1> 
   120 000005F5 89C8                <1>         mov     ax, cx                              ; return CX;
   121                              <1> 
   122                              <1>         ;------------------------------------------
   123                              <1>         ; レジスタの復帰
   124                              <1>         ;------------------------------------------
   125 000005F7 59                  <1>         pop     cx
   126                              <1> 
   127                              <1>         ;------------------------------------------
   128                              <1>         ; スタックフレームの破棄
   129                              <1>         ;------------------------------------------
   130 000005F8 89EC                <1>         mov     sp, bp
   131 000005FA 5D                  <1>         pop     bp
   132                              <1> 
   133 000005FB C3                  <1>         ret
   108                                  %include "../modules/real/lba_chs.s"
     1                              <1> lba_chs:
     2                              <1>         ;
     3                              <1>         ;
     4                              <1>         ;
     5 000005FC 55                  <1>         push    bp
     6 000005FD 89E5                <1>         mov     bp, sp
     7                              <1> 
     8                              <1>         ;
     9                              <1>         ;
    10                              <1>         ;
    11 000005FF 50                  <1>         push    ax
    12 00000600 53                  <1>         push    bx
    13 00000601 52                  <1>         push    dx
    14 00000602 56                  <1>         push    si
    15 00000603 57                  <1>         push    di
    16                              <1> 
    17                              <1>         ;
    18                              <1>         ;
    19                              <1>         ;
    20 00000604 8B7604              <1>         mov     si, [bp + 4]
    21 00000607 8B7E06              <1>         mov     di, [bp + 6]
    22                              <1> 
    23 0000060A 8A4404              <1>         mov     al, [si + drive.head]
    24 0000060D F66406              <1>         mul     byte [si + drive.sect]
    25 00000610 89C3                <1>         mov     bx, ax
    26                              <1> 
    27 00000612 BA0000              <1>         mov     dx, 0
    28 00000615 8B4608              <1>         mov     ax, [bp + 8]
    29 00000618 F7F3                <1>         div     bx
    30                              <1> 
    31 0000061A 894502              <1>         mov     [di + drive.cyln], ax
    32                              <1> 
    33 0000061D 89D0                <1>         mov     ax, dx
    34 0000061F F67406              <1>         div     byte [si + drive.sect]
    35                              <1> 
    36 00000622 0FB6D4              <1>         movzx   dx, ah
    37 00000625 42                  <1>         inc     dx
    38                              <1> 
    39 00000626 B400                <1>         mov     ah, 0x00
    40                              <1> 
    41 00000628 894504              <1>         mov     [di + drive.head], ax
    42 0000062B 895506              <1>         mov     [di + drive.sect], dx
    43                              <1> 
    44                              <1>         ;
    45                              <1>         ;
    46                              <1>         ;
    47 0000062E 5F                  <1>         pop     di
    48 0000062F 5E                  <1>         pop     si
    49 00000630 5A                  <1>         pop     dx
    50 00000631 5B                  <1>         pop     bx
    51 00000632 58                  <1>         pop     ax
    52                              <1> 
    53                              <1>         ;
    54                              <1>         ;
    55                              <1>         ;
    56 00000633 89EC                <1>         mov     sp, bp
    57 00000635 5D                  <1>         pop     bp
    58                              <1> 
    59 00000636 C3                  <1>         ret
   109                                  %include "../modules/real/read_lba.s"
     1                              <1> read_lba:
     2                              <1>     ;
     3                              <1>     ;
     4                              <1>     ;
     5 00000637 55                  <1>     push    bp
     6 00000638 89E5                <1>     mov     bp, sp
     7                              <1> 
     8                              <1>     ;
     9                              <1>     ;
    10                              <1>     ;
    11 0000063A 56                  <1>     push    si
    12                              <1> 
    13                              <1>     ;
    14                              <1>     ;
    15                              <1>     ;
    16 0000063B 8B7604              <1>     mov     si, [bp + 4]
    17                              <1> 
    18                              <1>     ;
    19                              <1>     ;
    20                              <1>     ;
    21 0000063E 8B4606              <1>     mov     ax, [bp + 6]
    22 00000641 5068[6606]56E8B3FF- <1>     cdecl   lba_chs, si, .chs, ax
    22 00000649 83C406              <1>
    23                              <1> 
    24                              <1>     ;
    25                              <1>     ;
    26                              <1>     ;
    27 0000064C 8A04                <1>     mov     al, [si + drive.no]
    28 0000064E A2[6606]            <1>     mov     [.chs + drive.no], al
    29                              <1>     
    30                              <1>     ;
    31                              <1>     ;
    32                              <1>     ;
    33 00000651 FF760AFF760868-     <1>     cdecl   read_chs, .chs, word [bp + 8], word [bp + 10]
    33 00000658 [6606]E8C1FA83C406  <1>
    34                              <1> 
    35                              <1>     ;
    36                              <1>     ;
    37                              <1>     ;
    38 00000660 5E                  <1>     pop     si
    39                              <1> 
    40                              <1>     ;
    41                              <1>     ;
    42                              <1>     ;
    43 00000661 89EC                <1>     mov     sp, bp
    44 00000663 5D                  <1>     pop     bp
    45                              <1> 
    46 00000664 C3                  <1>     ret
    47                              <1> 
    48 00000665 90                  <1> ALIGN 2
    49 00000666 00<rept>            <1> .chs:       times drive_size    db  0
   110                                  
   111                                  ;************************************************
   112                                  ;   ブート処理の第2ステージ
   113                                  ;************************************************
   114                                  stage_2:
   115                                          ;----------------------------------
   116                                          ;  文字列を表示
   117                                          ;----------------------------------
   118 0000066E 68[E806]E84CFA83C4-             cdecl   puts, .s0                       ; puts(.s0);
   118 00000676 02                 
   119                                          
   120                                          ;----------------------------------
   121                                          ;  ドライブ情報を取得
   122                                          ;----------------------------------
   123 00000677 68[B800]E80FFC83C4-             cdecl   get_drive_param, BOOT           ; get_drive_param(DX, BOOT.CYLN);
   123 0000067F 02                 
   124 00000680 83F800                          cmp     ax, 0                           ; if(0 == AX)
   125 00000683 750C                    .10Q:   jne     .10E                            ; {
   126 00000685 68[1F07]E835FA83C4-     .10T:   cdecl   puts, .e0                       ;   puts(.e0);
   126 0000068D 02                 
   127 0000068E E84EFA                          call    reboot                          ;   reboot();   // 再起動
   128                                  .10E:                                           ; }
   129                                          
   130                                          ;----------------------------------
   131                                          ;  ドライブ情報を表示
   132                                          ;----------------------------------
   133 00000691 A1[B800]                        mov     ax, [BOOT + drive.no]           ; AX = ブートドライブ;
   134 00000694 6A046A106A0268-                 cdecl   itoa, ax, .p1, 2, 16, 0b0100    ;
   134 0000069B [0007]50E86BFB83C4-
   134 000006A3 0A                 
   135 000006A4 A1[BA00]                        mov     ax, [BOOT + drive.cyln]         ;
   136 000006A7 6A046A106A0468-                 cdecl   itoa, ax, .p2, 4, 16, 0b0100    ;
   136 000006AE [0807]50E858FB83C4-
   136 000006B6 0A                 
   137 000006B7 A1[BC00]                        mov     ax, [BOOT + drive.head]         ; AX = ヘッド数;
   138 000006BA 6A046A106A0268-                 cdecl   itoa, ax, .p3, 2, 16, 0b0100    ;
   138 000006C1 [1207]50E845FB83C4-
   138 000006C9 0A                 
   139 000006CA A1[BE00]                        mov     ax, [BOOT + drive.sect]         ; AX = トラック当たりのセクタ数;
   140 000006CD 6A046A106A0268-                 cdecl   itoa, ax, .p4, 2, 16, 0b0100    ;
   140 000006D4 [1A07]50E832FB83C4-
   140 000006DC 0A                 
   141 000006DD 68[F706]E8DDF983C4-             cdecl   puts, .s1
   141 000006E5 02                 
   142                                  
   143                                          ;----------------------------------
   144                                          ;  次のステージへ以降
   145                                          ;----------------------------------
   146 000006E6 EB52                            jmp     stage_3                         ; 次のステージへ以降
   147                                  
   148                                          ;----------------------------------
   149                                          ;  データ
   150                                          ;----------------------------------
   151 000006E8 326E64207374656765-     .s0     db  "2nd stege...", 0x0A, 0x0D, 0
   151 000006F1 2E2E2E0A0D00       
   152                                  
   153 000006F7 2044726976653A3078      .s1     db  " Drive:0x"
   154 00000700 20202C20433A3078        .p1     db  "  , C:0x"
   155 00000708 202020202C20483A30-     .p2     db  "    , H:0x"
   155 00000711 78                 
   156 00000712 20202C20533A3078        .p3     db  "  , S:0x"
   157 0000071A 20200A0D00              .p4     db  "  ", 0x0A, 0x0D, 0
   158                                  
   159 0000071F 43616E277420676574-     .e0     db  "Can't get drive parameter.", 0
   159 00000728 206472697665207061-
   159 00000731 72616D657465722E00 
   160                                  
   161                                  ;************************************************
   162                                  ;   ブート処理の第3ステージ
   163                                  ;************************************************
   164                                  stage_3:
   165                                          ;----------------------------------
   166                                          ; 文字列を表示
   167                                          ;----------------------------------
   168 0000073A 68[B707]E880F983C4-             cdecl   puts, .s0
   168 00000742 02                 
   169                                  
   170                                          ;----------------------------------
   171                                          ; プロテクトモードで使用するフォントは
   172                                          ; BIOSに内蔵されたものを流用する
   173                                          ;----------------------------------
   174 00000743 68[0002]E884FB83C4-             cdecl   get_font_adr, FONT              ; // BIOSのを取得
   174 0000074B 02                 
   175                                  
   176                                          ;----------------------------------
   177                                          ; フォントアドレスの表示
   178                                          ;----------------------------------
   179 0000074C 6A046A106A0468-                 cdecl   itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   179 00000753 [D307]FF36[0002]E8-
   179 0000075A B0FA83C40A         
   180 0000075F 6A046A106A0468-                 cdecl   itoa, word [FONT.off], .p2, 4, 16, 0b0100
   180 00000766 [D807]FF36[0202]E8-
   180 0000076D 9DFA83C40A         
   181 00000772 68[C607]E848F983C4-             cdecl   puts, .s1
   181 0000077A 02                 
   182                                  
   183                                          ;----------------------------------
   184                                          ;  メモリ情報の取得と表示
   185                                          ;----------------------------------
   186 0000077B E86FFB                          cdecl   get_mem_info                    ; get_mem_info();
   187                                  
   188 0000077E 66A1[0402]                      mov     eax, [ACPI_DATA.adr]            ; EAX = ACPI_DATA.adr;
   189 00000782 6683F800                        cmp     eax, 0                          ; if(EAX)
   190 00000786 742D                            je      .10E                            ; {
   191                                  
   192 00000788 6A046A106A0468-                 cdecl   itoa, ax, .p4, 4, 16, 0b0100    ;    itoa(AX);  // 下位アドレスを変換
   192 0000078F [F107]50E877FA83C4-
   192 00000797 0A                 
   193 00000798 66C1E810                        shr     eax, 16                         ;    EAX >>= 16;
   194 0000079C 6A046A106A0468-                 cdecl   itoa, ax, .p3, 4, 16, 0b0100    ;    itoa(AX);  // 上位アドレスを変換
   194 000007A3 [ED07]50E863FA83C4-
   194 000007AB 0A                 
   195                                  
   196 000007AC 68[E207]E80EF983C4-             cdecl   puts, .s2                       ;    puts(.s2); // アドレスを表示
   196 000007B4 02                 
   197                                  .10E:                                           ; }
   198                                  
   199                                          ;----------------------------------
   200                                          ;  次のステージへ以降
   201                                          ;----------------------------------
   202 000007B5 EB41                            jmp     stage_4                         ; 次のステージへ以降
   203                                  
   204                                          ;----------------------------------
   205                                          ;  データ
   206                                          ;----------------------------------
   207 000007B7 337264207374616765-     .s0:    db  "3rd stage...", 0x0A, 0x0D, 0
   207 000007C0 2E2E2E0A0D00       
   208                                  
   209 000007C6 466F6E742041646472-     .s1:    db  "Font Address="
   209 000007CF 6573733D           
   210 000007D3 5A5A5A5A3A              .p1:    db  "ZZZZ:"
   211 000007D8 5A5A5A5A0A0D00          .p2:    db  "ZZZZ", 0x0A, 0x0D, 0
   212 000007DF 0A0D00                          db  0x0A, 0x0D, 0
   213                                  
   214 000007E2 204143504920646174-     .s2:    db  " ACPI data="
   214 000007EB 613D               
   215 000007ED 5A5A5A5A                .p3:    db  "ZZZZ"
   216 000007F1 5A5A5A5A0A0D00          .p4:    db  "ZZZZ", 0x0A, 0x0D, 0
   217                                  
   218                                  ;************************************************
   219                                  ;   ブート処理の第4ステージ
   220                                  ;************************************************
   221                                  stage_4:
   222                                          ;----------------------------------
   223                                          ; 文字列を表示
   224                                          ;----------------------------------
   225 000007F8 68[4908]E8C2F883C4-             cdecl   puts, .s0
   225 00000800 02                 
   226                                  
   227                                          ;----------------------------------
   228                                          ; A20ゲートの有効化
   229                                          ;----------------------------------
   230 00000801 FA                              cli
   231                                  
   232 00000802 68AD00E8D6FD83C402              cdecl   KBC_Cmd_Write, 0xAD
   233                                  
   234 0000080B 68D000E8CDFD83C402              cdecl   KBC_Cmd_Write, 0xD0
   235 00000814 68[6D08]E8A0FD83C4-             cdecl   KBC_Data_Read, .key
   235 0000081C 02                 
   236                                  
   237 0000081D 8A1E[6D08]                      mov     bl, [.key]
   238 00000821 80CB02                          or      bl, 0x02
   239                                  
   240 00000824 68D100E8B4FD83C402              cdecl   KBC_Cmd_Write, 0xD1
   241 0000082D 53E86BFD83C402                  cdecl   KBC_Data_Write, bx
   242                                  
   243 00000834 68AE00E8A4FD83C402              cdecl   KBC_Cmd_Write, 0xAE
   244                                  
   245 0000083D FB                              sti
   246                                          
   247                                          ;----------------------------------
   248                                          ; 文字列を表示
   249                                          ;----------------------------------
   250 0000083E 68[5808]E87CF883C4-             cdecl   puts, .s1
   250 00000846 02                 
   251                                          
   252                                          ;----------------------------------
   253                                          ; 次のステージへ以降
   254                                          ;----------------------------------
   255 00000847 EB26                            jmp     stage_5                         ; 次のステージへ以降
   256                                  
   257 00000849 347468207374616765-     .s0:    db  "4th stage...", 0x0A, 0x0D, 0
   257 00000852 2E2E2E0A0D00       
   258 00000858 204132302047617465-     .s1:    db  " A20 Gate Enabled.", 0x0A, 0x0D, 0
   258 00000861 20456E61626C65642E-
   258 0000086A 0A0D00             
   259                                  
   260 0000086D 0000                    .key:   dw  0
   261                                  
   262                                  ;************************************************
   263                                  ;   ブート処理の第5ステージ
   264                                  ;************************************************
   265                                  stage_5:
   266                                          ;----------------------------------
   267                                          ; 文字列を表示
   268                                          ;----------------------------------
   269 0000086F 68[9B08]E84BF883C4-             cdecl   puts, .s0
   269 00000877 02                 
   270                                          
   271                                          ;----------------------------------
   272                                          ; カーネルを読み込む
   273                                          ;----------------------------------
   274 00000878 68009C6A106A1068-               cdecl   read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END
   274 00000880 [B800]E8B2FD83C408 
   275                                  
   276 00000888 83F810                          cmp     ax, KERNEL_SECT
   277 0000088B 740C                    .10Q:   jz      .10E
   278 0000088D 68[AA08]E82DF883C4-     .10T:   cdecl   puts, .e0
   278 00000895 02                 
   279 00000896 E846F8                          call    reboot
   280                                  .10E:
   281                                  
   282                                          ;----------------------------------
   283                                          ; 次のステージへ以降
   284                                          ;----------------------------------
   285 00000899 EB28                            jmp     stage_6
   286                                  
   287 0000089B 357468207374616765-     .s0:    db  "5th stage...", 0x0A, 0x0D, 0
   287 000008A4 2E2E2E0A0D00       
   288 000008AA 4661696C757265206C-     .e0:    db  "Failure load kernel...", 0x0A, 0x0D, 0
   288 000008B3 6F6164206B65726E65-
   288 000008BC 6C2E2E2E0A0D00     
   289                                  
   290                                  ;************************************************
   291                                  ;   ブート処理の第6ステージ
   292                                  ;************************************************
   293                                  stage_6:
   294                                          ;----------------------------------
   295                                          ; 文字列を表示
   296                                          ;----------------------------------
   297 000008C3 68[DB08]E8F7F783C4-             cdecl   puts, .s0
   297 000008CB 02                 
   298                                          
   299                                          ;----------------------------------
   300                                          ; ユーザからの入力待ち
   301                                          ;----------------------------------
   302                                  .10L:                                           ; do
   303                                                                                  ; {
   304 000008CC B400                            mov     ah, 0x00                        ;    // キー入力待ち
   305 000008CE CD16                            int     0x16                            ;    AL = BIOS(0x16, 0x00);
   306 000008D0 3C20                            cmp     al, ' '                         ;    ZF = AL == ' ';
   307 000008D2 75F8                            jne     .10L                            ; } while(!ZF);
   308                                  
   309                                          ;----------------------------------
   310                                          ; ビデオモードの設定
   311                                          ;----------------------------------
   312 000008D4 B81200                          mov     ax, 0x0012                      ; VGA 640x480
   313 000008D7 CD10                            int     0x10                            ; BIOS(0x10, 0x12);
   314                                  
   315                                          ;----------------------------------
   316                                          ; 処理の終了
   317                                          ;----------------------------------
   318 000008D9 EB5B                            jmp     stage_7                         ; 次のステージへ以降
   319                                  
   320 000008DB 367468207374616765-     .s0:    db  "6th stage...", 0x0A, 0x0D, 0x0A, 0x0D
   320 000008E4 2E2E2E0A0D0A0D     
   321 000008EB 205B50757368205350-             db  " [Push SPACE key to protect mode...", 0x0A, 0x0D, 0
   321 000008F4 414345206B65792074-
   321 000008FD 6F2070726F74656374-
   321 00000906 206D6F64652E2E2E0A-
   321 0000090F 0D00               
   322                                  
   323                                  ;************************************************
   324                                  ;   GLOBAL DESCRIPTOR TABLE
   325                                  ;   (セグメントディスクリプタの配列)
   326                                  ;************************************************
   327 00000911 00<rept>                ALIGN 4, db 0
   328 00000914 0000000000000000        GDT:            dq  0x00_0_0_0_0_000000_0000    ; NULL
   329 0000091C FFFF0000009ACF00        .cs:            dq  0x00_C_F_9_A_000000_FFFF    ; CODE 4G
   330 00000924 FFFF00000092CF00        .ds:            dq  0x00_C_F_9_2_000000_FFFF    ; DATA 4G
   331                                  .gdt_end:
   332                                  
   333                                  ;================================================
   334                                  ;    セレクタ
   335                                  ;================================================
   336                                  SEL_CODE        equ  .cs - GDT                  ; コード用セレクタ
   337                                  SEL_DATA        equ  .ds - GDT                  ; データ用セレクタ
   338                                  
   339                                  ;================================================
   340                                  ;    GDT
   341                                  ;================================================
   342 0000092C 1700                    GDTR:   dw      GDT.gdt_end - GDT - 1           ; ディスクリプタテーブルのリミット
   343 0000092E [1409]                          dw      GDT                             ; ディスクリプタテーブルのアドレス
   344                                          
   345                                  ;================================================
   346                                  ;    IDT(疑似: 割り込み禁止にするため)
   347                                  ;================================================
   348 00000930 0000                    IDTR:   dw      0                               ; IDTリミット
   349 00000932 00000000                        dd      0                               ; IDTアドレス
   350                                  
   351                                  ;************************************************
   352                                  ;   ブート処理の第7ステージ
   353                                  ;************************************************
   354                                  stage_7:
   355 00000936 FA                              cli                                     ; 割り込み禁止
   356                                  
   357                                          ;----------------------------------
   358                                          ; GDTロード
   359                                          ;----------------------------------
   360 00000937 0F0116[2C09]                    lgdt    [GDTR]                          ; // ディスクリプタテーブルをロード
   361 0000093C 0F011E[3009]                    lidt    [IDTR]                          ; // 割り込みディスクリプタテーブルをロード
   362                                  
   363                                          ;----------------------------------
   364                                          ; プロテクトモードへ以降
   365                                          ;----------------------------------
   366 00000941 0F20C0                          mov     eax, cr0                        ; // PEビットをセット
   367 00000944 83C801                          or      ax, 1                           ; CR0 |= 1;
   368 00000947 0F22C0                          mov     cr0, eax                        ; 
   369                                  
   370 0000094A EB00                            jmp     $ + 2                           ; 先読みをクリア
   371                                  
   372                                          ;----------------------------------
   373                                          ; セグメント間ジャンプ
   374                                          ;----------------------------------
   375                                  [BITS 32]
   376 0000094C 66                              DB      0x66                            ; オペランドサイズオーバーライドプレフィックス
   377 0000094D EA[54090000]0800                jmp     SEL_CODE:CODE_32
   378                                  
   379                                  
   380                                  ;************************************************
   381                                  ;   32ビットコード開始
   382                                  ;************************************************
   383                                  CODE_32:
   384                                  
   385                                          ;----------------------------------
   386                                          ; セレクタを初期化
   387                                          ;----------------------------------
   388 00000954 66B81000                        mov     ax, SEL_DATA
   389 00000958 8ED8                            mov     ds, ax
   390 0000095A 8EC0                            mov     es, ax
   391 0000095C 8EE0                            mov     fs, ax
   392 0000095E 8EE8                            mov     gs, ax
   393 00000960 8ED0                            mov     ss, ax
   394                                  
   395                                          ;----------------------------------
   396                                          ; カーネル部をコピー
   397                                          ;----------------------------------
   398 00000962 B900200000                      mov     ecx, (KERNEL_SIZE)              ; ECX = 4バイト単位でコピー;
   399 00000967 BE009C0000                      mov     esi, BOOT_END                   ; ESI = 0x0000_9C00; // カーネル部
   400 0000096C BF00101000                      mov     edi, KERNEL_LOAD                ; EDI = 0x0010_1000; // 上位メモリ
   401 00000971 FC                              cld                                     ; // DFクリア(+方向)
   402 00000972 F3A5                            rep movsd                               ; while(--ECX) *EDI++ = *ESI++;
   403                                  
   404                                          ;----------------------------------
   405                                          ; カーネル処理に以降
   406                                          ;----------------------------------
   407 00000974 E9(00101000)                    jmp     KERNEL_LOAD                     ; カーネルの先頭にジャンプ
   408                                  
   409                                  
   410                                  ;************************************************
   411                                  ;   パディング
   412                                  ;************************************************
   413 00000979 00<rept>                        times BOOT_SIZE - ($ - $$)     db  0   ; パディング
