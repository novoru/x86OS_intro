     1                                  ;************************************************
     2                                  ;   マクロ
     3                                  ;************************************************
     4                                  %include    "../include/define.s"
     1                              <1>     BOOT_LOAD       equ     0x7C00
     2                              <1> 
     3                              <1>     BOOT_SIZE       equ     (1024 * 8)
     4                              <1>     SECT_SIZE       equ     (512)
     5                              <1>     BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)
     6                              <1> 
     7                              <1>     E820_RECORD_SIZE    equ     20
     5                                  %include    "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep    %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate - 1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>         .no     resw    1           ; ドライブ番号
    19 00000002 <res 00000002>      <1>         .cyln   resw    1           ; シリンダ
    20 00000004 <res 00000002>      <1>         .head   resw    1           ; ヘッド
    21 00000006 <res 00000002>      <1>         .sect   resw    1           ; セクタ
    22                              <1> endstruc
     6                                  
     7                                      ORG     BOOT_LOAD                   ; ロードアドレスをアセンブラに指示
     8                                  
     9                                  ;************************************************
    10                                  ;   エントリポイント
    11                                  ;************************************************
    12                                  entry:
    13                                          ;----------------------------------
    14                                          ;  BPB(BIOS Parameter Block)
    15                                          ;----------------------------------
    16 00000000 EB58                            jmp ipl                             ; IPLへジャンプ
    17 00000002 90<rept>                        times   90 - ($ - $$) db 0x90       ;
    18                                  
    19                                          ;----------------------------------
    20                                          ;  IPL(Intial Program Loader)
    21                                          ;----------------------------------
    22                                  ipl:
    23 0000005A FA                              cli                                 ; // 割り込み禁止
    24                                  
    25 0000005B B80000                          mov     ax, 0x0000                  ; AX = 0x0000;
    26 0000005E 8ED8                            mov     ds, ax                      ; DS = 0x0000;
    27 00000060 8EC0                            mov     es, ax                      ; ES = 0x0000;
    28 00000062 8ED0                            mov     ss, ax                      ; SS = 0x0000;
    29 00000064 BC007C                          mov     sp, BOOT_LOAD               ; SP = 0x7C00;
    30                                  
    31 00000067 FB                              sti                                 ; // 割り込み許可
    32                                  
    33 00000068 8816[B800]                      mov     [BOOT + drive.no], dl       ; ブートドライブを保持
    34                                  
    35                                          ;----------------------------------
    36                                          ;  文字列を表示
    37                                          ;----------------------------------
    38 0000006C 68[9900]E84E0083C4-             cdecl   puts, .s0                   ; puts(.s0)
    38 00000074 02                 
    39                                  
    40                                          ;----------------------------------
    41                                          ;  残りのセクタをすべて読み込む
    42                                          ;----------------------------------
    43 00000075 BB0F00                          mov     bx, BOOT_SECT - 1           ; BX = 残りのブートセクタ数;
    44 00000078 B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE   ; CX = 次のロードアドレス;
    45                                  
    46 0000007B 515368[B800]E89B00-             cdecl   read_chs, BOOT, bx, cx      ; AX = read_chr(.chs, bx, cx);
    46 00000083 83C406             
    47                                  
    48 00000086 39D8                            cmp     ax, bx                      ; if(AX != 残りのセクタ数)
    49 00000088 730C                    .10Q:   jnc     .10E                        ; {
    50 0000008A 68[A600]E8300083C4-     .10T:   cdecl   puts, .e0                   ;    puts(.e0);
    50 00000092 02                 
    51 00000093 E84900                          call    reboot                      ;    reboot();      // 再起動
    52                                  .10E:                                       ; }
    53                                  
    54                                          ;----------------------------------
    55                                          ;  次のステージへ以降
    56                                          ;----------------------------------
    57 00000096 E90305                          jmp     stage_2
    58                                  
    59                                          ;----------------------------------
    60                                          ;  データ
    61                                          ;----------------------------------
    62 00000099 426F6F74696E672E2E-     .s0     db  "Booting...", 0x0A, 0x0D, 0
    62 000000A2 2E0A0D00           
    63 000000A6 4572726F723A736563-     .e0     db  "Error:sector read", 0
    63 000000AF 746F72207265616400 
    64                                  
    65                                  ;************************************************
    66                                  ;   ブートドライブに関する情報
    67                                  ;************************************************
    68                                  ALIGN 2, db 0
    69                                  BOOT:                                           ; ブートドライブに関する情報
    70                                          istruc  drive
    71 000000B8 0000                                at  drive.no,       dw 0            ; ドライブ番号
    72 000000BA 0000                                at  drive.cyln,     dw 0            ; C: シリンダ
    73 000000BC 0000                                at  drive.head,     dw 0            ; H: ヘッド
    74 000000BE 0200                                at  drive.sect,     dw 2            ; S: セクタ
    75                                          iend
    76                                  
    77                                  ;************************************************
    78                                  ;   モジュール
    79                                  ;************************************************
    80                                  %include "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1>     ;---------------------------------
     3                              <1>     ;   スタックフレームの構築
     4                              <1>     ;---------------------------------
     5                              <1>                                         ;   BP+ 4| 文字列へのアドレス
     6 000000C0 55                  <1>     push    bp                          ;   BP+ 2| IP(戻り番地)
     7 000000C1 89E5                <1>     mov     bp, sp                      ;   BP+ 0| BP(元の値)
     8                              <1>                                         ;  ------+------
     9                              <1> 
    10                              <1>     ;---------------------------------
    11                              <1>     ;   レジスタの保存
    12                              <1>     ;---------------------------------
    13 000000C3 50                  <1>     push    ax
    14 000000C4 53                  <1>     push    bx
    15 000000C5 56                  <1>     push    si
    16                              <1> 
    17                              <1>     ;---------------------------------
    18                              <1>     ;   引数の取得
    19                              <1>     ;---------------------------------
    20 000000C6 8B7604              <1>     mov     si, [bp + 4]                ; SI = 文字列へのアドレス;
    21                              <1> 
    22                              <1>     ;---------------------------------
    23                              <1>     ;   処理の開始
    24                              <1>     ;---------------------------------
    25 000000C9 B40E                <1>     mov ah, 0x0E                        ; テレタイプ式1文字出力
    26 000000CB BB0000              <1>     mov bx, 0x0000                      ; ページ番号と文字色を0に設定
    27 000000CE FC                  <1>     cld                                 ; DF = 0; // アドレス加算
    28                              <1> .10L:                                   ; do
    29                              <1>                                         ; {
    30 000000CF AC                  <1>     lodsb                               ;   AL = *SI++;
    31                              <1>                                         ;
    32 000000D0 3C00                <1>     cmp     al, 0                       ;   if(0 == AL);
    33 000000D2 7404                <1>     je      .10E                        ;     break;
    34                              <1>                                         ;
    35 000000D4 CD10                <1>     int     0x10                        ;   Int10(0x0E, AL) // 文字列出力
    36 000000D6 EBF7                <1>     jmp     .10L                        ;
    37                              <1> .10E:                                   ; } while(1);
    38                              <1> 
    39                              <1>     ;---------------------------------
    40                              <1>     ;   レジスタの復帰
    41                              <1>     ;---------------------------------
    42 000000D8 5E                  <1>     pop si
    43 000000D9 5B                  <1>     pop bx
    44 000000DA 58                  <1>     pop ax
    45                              <1> 
    46                              <1>     ;---------------------------------
    47                              <1>     ;   スタックフレームの破棄
    48                              <1>     ;---------------------------------
    49 000000DB 89EC                <1>     mov sp, bp
    50 000000DD 5D                  <1>     pop bp
    51                              <1> 
    52 000000DE C3                  <1>     ret
    81                                  %include "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1>         ;------------------------------------
     3                              <1>         ; メッセージを表示
     4                              <1>         ;------------------------------------
     5                              <1> 
     6 000000DF 68[FB00]E8DBFF83C4- <1>         cdecl   puts, .s0
     6 000000E7 02                  <1>
     7                              <1> 
     8                              <1>         ;------------------------------------
     9                              <1>         ; キー入力待ち
    10                              <1>         ;------------------------------------
    11                              <1> .10L:
    12                              <1> 
    13 000000E8 B410                <1>         mov     ah, 0x10
    14 000000EA CD16                <1>         int     0x16
    15                              <1> 
    16 000000EC 3C20                <1>         cmp     al, ' '
    17 000000EE 75F8                <1>         jne     .10L
    18                              <1> 
    19                              <1>         ;------------------------------------
    20                              <1>         ; 開業を出力
    21                              <1>         ;------------------------------------
    22 000000F0 68[1901]E8CAFF83C4- <1>         cdecl   puts, .s1
    22 000000F8 02                  <1>
    23                              <1> 
    24                              <1>         ;------------------------------------
    25                              <1>         ; 再起動
    26                              <1>         ;------------------------------------
    27 000000F9 CD19                <1>         int     0x19
    28                              <1> 
    29                              <1>         ;------------------------------------
    30                              <1>         ; 文字列データ
    31                              <1>         ;------------------------------------
    32 000000FB 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    32 00000104 414345206B65792074- <1>
    32 0000010D 6F207265626F6F742E- <1>
    32 00000116 2E2E00              <1>
    33 00000119 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    82                                  %include "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>         ;----------------------------------
     3                              <1>         ; スタックフレームの構築
     4                              <1>         ;----------------------------------
     5                              <1>                                             ;    + 8| コピー先
     6                              <1>                                             ;    + 6| セクタ数
     7                              <1>                                             ;    + 4| パラメータバッファ
     8                              <1>                                             ; ------+--------------
     9                              <1>                                             ;    + 2| IP(戻り番地)
    10 0000011E 55                  <1>         push    bp                          ;  BP+ 0| BP(元の値)
    11 0000011F 89E5                <1>         mov     bp, sp                      ; ------+--------------
    12 00000121 6A03                <1>         push    3                           ;    - 2| retry = 3; // リトライ回数
    13 00000123 6A00                <1>         push    0                           ;    - 4| sect  = 0; // 読み込みセクタ数
    14                              <1> 
    15                              <1>         ;----------------------------------
    16                              <1>         ; レジスタの保存
    17                              <1>         ;----------------------------------
    18 00000125 53                  <1>         push    bx
    19 00000126 51                  <1>         push    cx
    20 00000127 52                  <1>         push    dx
    21 00000128 06                  <1>         push    es
    22 00000129 56                  <1>         push    si
    23                              <1> 
    24                              <1>         ;----------------------------------
    25                              <1>         ; 処理の開始
    26                              <1>         ;----------------------------------
    27 0000012A 8B7604              <1>         mov     si, [bp + 4]
    28                              <1> 
    29                              <1>         ;----------------------------------
    30                              <1>         ; CXレジスタの設定
    31                              <1>         ; (BIOSコールの呼び出しに適した型氏に変換)
    32                              <1>         ;----------------------------------
    33 0000012D 8A6C02              <1>         mov     ch, [si + drive.cyln + 0]
    34 00000130 8A4C03              <1>         mov     cl, [si + drive.cyln + 1]
    35 00000133 C0E106              <1>         shl     cl, 6
    36 00000136 0A4C06              <1>         or      cl, [si + drive.sect]
    37                              <1> 
    38                              <1>         ;----------------------------------
    39                              <1>         ; セクタ読み込み
    40                              <1>         ;----------------------------------
    41 00000139 8A7404              <1>         mov     dh, [si + drive.head]
    42 0000013C 8A14                <1>         mov     dl, [si + 0]
    43 0000013E B80000              <1>         mov     ax, 0x0000
    44 00000141 8EC0                <1>         mov     es, ax
    45 00000143 8B5E08              <1>         mov     bx, [bp + 8]
    46                              <1> .10L:
    47                              <1> 
    48 00000146 B402                <1>         mov     ah, 0x02
    49 00000148 8A4606              <1>         mov     al, [bp + 6]
    50                              <1> 
    51 0000014B CD13                <1>         int     0x13
    52 0000014D 7304                <1>         jnc     .11E
    53                              <1> 
    54 0000014F B000                <1>         mov     al, 0
    55 00000151 EB0C                <1>         jmp     .10E
    56                              <1> .11E:
    57                              <1> 
    58 00000153 3C00                <1>         cmp     al, 0
    59 00000155 7508                <1>         jne     .10E
    60                              <1> 
    61 00000157 B80000              <1>         mov     ax, 0
    62 0000015A FF4EFE              <1>         dec     word [bp - 2]
    63 0000015D 75E7                <1>         jnz     .10L
    64                              <1> .10E:
    65 0000015F B400                <1>         mov     ah, 0
    66                              <1> 
    67                              <1>         ;----------------------------------
    68                              <1>         ; レジスタの復帰
    69                              <1>         ;----------------------------------
    70 00000161 5E                  <1>         pop     si
    71 00000162 07                  <1>         pop     es
    72 00000163 5A                  <1>         pop     dx
    73 00000164 59                  <1>         pop     cx
    74 00000165 5B                  <1>         pop     bx
    75                              <1> 
    76                              <1>         ;----------------------------------
    77                              <1>         ; スタックフレームの破棄
    78                              <1>         ;----------------------------------
    79 00000166 89EC                <1>         mov     sp, bp
    80 00000168 5D                  <1>         pop     bp
    81                              <1> 
    82 00000169 C3                  <1>         ret
    83                                  
    84                                  ;************************************************
    85                                  ;   ブートフラグ(先頭512バイトの終了)
    86                                  ;************************************************
    87 0000016A 00<rept>                    times   510 - ($ - $$) db 0x00
    88 000001FE 55AA                        db  0x55, 0xAA
    89                                  
    90                                  ;************************************************
    91                                  ;   モジュール(先頭512バイト以降に配置)
    92                                  ;************************************************
    93                                  %include "../modules/real/itoa.s"
     1                              <1> itoa:
     2                              <1>         ;------------------------------------------
     3                              <1>         ; スタックフレームの構築
     4                              <1>         ;------------------------------------------
     5                              <1>                                                     ;     +12| BP(元の値)
     6                              <1>                                                     ;     +10| BP(元の値)
     7                              <1>                                                     ;     + 8| BP(元の値)
     8                              <1>                                                     ;     + 6| BP(元の値)
     9                              <1>                                                     ;     + 4| BP(元の値)
    10                              <1>                                                     ;     + 2| IP(戻り番地)
    11 00000200 55                  <1>         push    bp                                  ;   BP+ 0| BP(元の値)
    12 00000201 89E5                <1>         mov     bp, sp                              ; -------+-------------
    13                              <1> 
    14                              <1>         ;------------------------------------------
    15                              <1>         ; レジスタの保存
    16                              <1>         ;------------------------------------------
    17 00000203 50                  <1>         push    ax
    18 00000204 53                  <1>         push    bx
    19 00000205 51                  <1>         push    cx
    20 00000206 52                  <1>         push    dx
    21 00000207 56                  <1>         push    si
    22 00000208 57                  <1>         push    di
    23                              <1> 
    24                              <1>         ;------------------------------------------
    25                              <1>         ; 引数を取得
    26                              <1>         ;------------------------------------------
    27 00000209 8B4604              <1>         mov     ax, [bp + 4]                        ; val   = 数値;
    28 0000020C 8B7606              <1>         mov     si, [bp + 6]                        ; dst   = バッファアドレス;
    29 0000020F 8B4E08              <1>         mov     cx, [bp + 8]                        ; size  = 残りバッファサイズ; 
    30                              <1>         
    31 00000212 89F7                <1>         mov     di, si                              ; // バッファの最後尾
    32 00000214 01CF                <1>         add     di, cx                              ; dst = &dst[size - 1];
    33 00000216 4F                  <1>         dec     di                                  ;
    34                              <1> 
    35 00000217 8B5E0C              <1>         mov     bx, word [bp + 12]                  ; flags = オプション;
    36                              <1> 
    37                              <1>         ;------------------------------------------
    38                              <1>         ; 符号付き判定
    39                              <1>         ;------------------------------------------
    40 0000021A F7C30100            <1>         test    bx, 0b0001                          ; if(flags & 0x01)  // 符号付き
    41 0000021E 7408                <1> .10Q:   je      .10E                                ; {
    42 00000220 83F800              <1>         cmp     ax, 0                               ;   if(val < 0)
    43 00000223 7D03                <1> .12Q:   jge     .12E                                ;   {
    44 00000225 83CB02              <1>         or      bx, 0b0010                          ;      flags |= 2;  // 符号表示
    45                              <1> .12E:                                               ;   }
    46                              <1> .10E:                                               ; }
    47                              <1> 
    48                              <1>         ;------------------------------------------
    49                              <1>         ; 符号出力判定
    50                              <1>         ;------------------------------------------
    51 00000228 F7C31A27            <1>         test    bx, 010010                          ; if(flags & 0x02)  // 符号出力判定
    52 0000022C 7410                <1> .20Q:   je      .20E                                ; {
    53 0000022E 83F800              <1>         cmp     ax, 0                               ;    if(val < 0)
    54 00000231 7D07                <1> .22Q:   jge     .22F                                ;    {
    55 00000233 F7D8                <1>         neg     ax                                  ;       val *= -1;  // 符号判定
    56 00000235 C6042D              <1>         mov     [si], byte '-'                      ;       *dst = '-'; // 符号表示
    57 00000238 EB03                <1>         jmp     .22E                                ;    }
    58                              <1> .22F:                                               ;    else
    59                              <1>                                                     ;    {
    60 0000023A C6042B              <1>         mov     [si], byte '+'                      ;       *dst = '+';    // 符号表示
    61                              <1> .22E:                                               ;    }
    62 0000023D 49                  <1>         dec     cx                                  ;    size--;           // 残りバッファサイズの減算
    63                              <1> .20E:                                               ; }
    64                              <1> 
    65                              <1>         ;------------------------------------------
    66                              <1>         ; ASCII変換
    67                              <1>         ;------------------------------------------
    68 0000023E 8B5E0A              <1>         mov     bx, [bp + 10]                       ; BX = 基数;
    69                              <1> .30L:                                               ; do
    70                              <1>                                                     ; {
    71 00000241 BA0000              <1>         mov     dx, 0                               ;
    72 00000244 F7F3                <1>         div     bx                                  ;   DX = DX:AX % 基数;
    73                              <1>                                                     ;   AX = DX:AX / 基数;
    74                              <1>                                                     ;
    75 00000246 89D6                <1>         mov     si, dx                              ;   // テーブル参照
    76 00000248 8A94[7002]          <1>         mov     dl, byte [.ascii + si]              ;   DL = ASCII[DX];
    77                              <1>                                                     ;
    78 0000024C 8815                <1>         mov     [di], dl                            ;   *dst = DL;
    79 0000024E 4F                  <1>         dec     di                                  ;   dst--;
    80                              <1>                                                     ;
    81 0000024F 83F800              <1>         cmp     ax, 0                               ;
    82 00000252 E0ED                <1>         loopnz  .30L                                ; } while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;------------------------------------------
    86                              <1>         ; 空欄を埋める
    87                              <1>         ;------------------------------------------
    88 00000254 83F900              <1>         cmp     cx, 0                               ; if(size)
    89 00000257 740D                <1> .40Q:   je      .40E                                ; {
    90 00000259 B020                <1>         mov     al, ' '                             ;   AL = ' ';   // ' 'で埋める(デフォルト値)
    91 0000025B 837E0C04            <1>         cmp     [bp + 12], word 0b0100              ;   if(flags & 0x04)
    92 0000025F 7502                <1> .42Q:   jne     .42E                                ;   {
    93 00000261 B030                <1>         mov     al, '0'                             ;       AL = '0';
    94                              <1> .42E:                                               ;   }
    95 00000263 FD                  <1>         std                                         ;   // DF = 1(-方向)
    96 00000264 F3AA                <1>         rep     stosb                               ;   while(--CX) *DI -- = ' ';
    97                              <1> .40E:                                               ; }
    98                              <1> 
    99                              <1>         ;------------------------------------------
   100                              <1>         ; レジスタの復帰
   101                              <1>         ;------------------------------------------
   102 00000266 5F                  <1>         pop     di
   103 00000267 5E                  <1>         pop     si
   104 00000268 5A                  <1>         pop     dx
   105 00000269 59                  <1>         pop     cx
   106 0000026A 5B                  <1>         pop     bx
   107 0000026B 58                  <1>         pop     ax
   108                              <1> 
   109                              <1>         ;------------------------------------------
   110                              <1>         ; スタックフレームの破棄
   111                              <1>         ;------------------------------------------
   112 0000026C 89EC                <1>         mov     sp, bp
   113 0000026E 5D                  <1>         pop     bp
   114                              <1> 
   115 0000026F C3                  <1>         ret
   116                              <1> 
   117 00000270 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"                  ; 変換テーブル
   117 00000279 39414243444546      <1>
    94                                  %include "../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1>         ;----------------------------------
     3                              <1>         ; スタックフレームの構築
     4                              <1>         ;----------------------------------
     5                              <1>                                             ;    + 4| パラメータバッファ
     6                              <1>                                             ;    + 2| IP(戻り番地)
     7 00000280 55                  <1>         push    bp                          ;  BP+ 0| BP(元の値)
     8 00000281 89E5                <1>         mov     bp, sp                      ; ------+----------
     9                              <1> 
    10                              <1>         ;----------------------------------
    11                              <1>         ; レジスタの保存
    12                              <1>         ;----------------------------------
    13 00000283 53                  <1>         push    bx
    14 00000284 51                  <1>         push    cx
    15 00000285 06                  <1>         push    es
    16 00000286 56                  <1>         push    si
    17 00000287 57                  <1>         push    di
    18                              <1> 
    19                              <1>         ;----------------------------------
    20                              <1>         ; 処理の開始
    21                              <1>         ;----------------------------------
    22 00000288 8B7604              <1>         mov     si, [bp + 4]                ; SI = バッファ;
    23                              <1> 
    24 0000028B B80000              <1>         mov     ax, 0                       ; Disk Base Table Pointerの初期化
    25 0000028E 8EC0                <1>         mov     es, ax                      ; ES = 0;
    26 00000290 89C7                <1>         mov     di, ax                      ; DI = 0;
    27                              <1> 
    28 00000292 B408                <1>         mov     ah, 8                       ; // get drive paramters
    29 00000294 8A14                <1>         mov     dl, [si + drive.no]         ; DL = ドライブ番号;
    30 00000296 CD13                <1>         int     0x13                        ; CF = BIOS(0x13, 8);
    31 00000298 721B                <1> .10Q:   jc      .10F                        ; if(0 == CF)
    32                              <1> .10T:                                       ; {
    33 0000029A 88C8                <1>         mov     al, cl                      ;   AX = セクタ数;
    34 0000029C 83E03F              <1>         and     ax, 0x3F                    ;   // 下位6ビットのみで有効
    35                              <1> 
    36 0000029F C0E906              <1>         shr     cl, 6                       ;   CX = シリンダ数;
    37 000002A2 C1C908              <1>         ror     cx, 8                       ;
    38 000002A5 41                  <1>         inc     cx                          ;
    39                              <1> 
    40 000002A6 0FB6DE              <1>         movzx   bx, dh                      ;   BX = ヘッド数(1ベース);
    41 000002A9 43                  <1>         inc     bx                          ;
    42                              <1> 
    43 000002AA 894C02              <1>         mov     [si + drive.cyln], cx       ;   drive.syln = CX;    // C:シリンダ数
    44 000002AD 895C04              <1>         mov     [si + drive.head], bx       ;   drive.head = BX;    // H:ヘッド数
    45 000002B0 894406              <1>         mov     [si + drive.sect], ax       ;   drive.sect = AX;    // S:シリンダ数
    46                              <1> 
    47 000002B3 EB03                <1>         jmp     .10E                        ; }
    48                              <1> .10F:                                       ; else
    49                              <1>                                             ; {
    50 000002B5 B80000              <1>         mov     ax, 0                       ;   AX = 0;     // 失敗
    51                              <1> .10E:                                       ; }
    52                              <1> 
    53                              <1>         ;----------------------------------
    54                              <1>         ; レジスタの復帰
    55                              <1>         ;----------------------------------
    56 000002B8 5F                  <1>         pop     di
    57 000002B9 5E                  <1>         pop     si
    58 000002BA 07                  <1>         pop     es
    59 000002BB 59                  <1>         pop     cx
    60 000002BC 5B                  <1>         pop     bx
    61                              <1> 
    62                              <1>         ;----------------------------------
    63                              <1>         ; スタックフレームの破棄
    64                              <1>         ;----------------------------------
    65 000002BD 89EC                <1>         mov     sp, bp
    66 000002BF 5D                  <1>         pop     bp
    67                              <1> 
    68 000002C0 C3                  <1>         ret
    95                                  %include "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1>         ;----------------------------------
     3                              <1>         ; スタックフレームの構築
     4                              <1>         ;----------------------------------
     5                              <1>                                             ;    + 4| フォントアドレス格納位置
     6                              <1>                                             ;    + 2| IP(戻り番地)
     7 000002C1 55                  <1>         push    bp                          ;  BP+ 0| BP(元の値)
     8 000002C2 89E5                <1>         mov     bp, sp                      ; ------+------------
     9                              <1> 
    10                              <1>         ;----------------------------------
    11                              <1>         ; レジスタの保存
    12                              <1>         ;----------------------------------
    13 000002C4 50                  <1>         push    ax
    14 000002C5 53                  <1>         push    bx
    15 000002C6 56                  <1>         push    si
    16 000002C7 06                  <1>         push    es
    17 000002C8 55                  <1>         push    bp
    18                              <1> 
    19                              <1>         ;----------------------------------
    20                              <1>         ; 引数を取得
    21                              <1>         ;----------------------------------
    22 000002C9 8B7604              <1>         mov     si, [bp + 4]                ; dst = FONTアドレスの保存先;
    23                              <1> 
    24                              <1>         ;----------------------------------
    25                              <1>         ; フォントアドレスの取得
    26                              <1>         ;----------------------------------
    27 000002CC B83011              <1>         mov     ax, 0x1130                  ; // フォントアドレスの取得
    28 000002CF B706                <1>         mov     bh, 0x06                    ; 8x16 font (vga/mcga)
    29 000002D1 CD10                <1>         int     10h                         ; ES:BP = FONT ADDRESS
    30                              <1> 
    31                              <1>         ;----------------------------------
    32                              <1>         ; FONTアドレスを保存
    33                              <1>         ;----------------------------------
    34 000002D3 8C04                <1>         mov     [si + 0], es                ; dst[0] = セグメント;
    35 000002D5 896C02              <1>         mov     [si + 2], bp                ; dst[1] = オフセット;
    36                              <1> 
    37                              <1>         ;----------------------------------
    38                              <1>         ; レジスタの復帰
    39                              <1>         ;----------------------------------
    40 000002D8 5D                  <1>         pop     bp
    41 000002D9 07                  <1>         pop     es
    42 000002DA 5E                  <1>         pop     si
    43 000002DB 5B                  <1>         pop     bx
    44 000002DC 58                  <1>         pop     ax
    45                              <1>         
    46                              <1>         ;----------------------------------
    47                              <1>         ; スタックフレームの破棄
    48                              <1>         ;----------------------------------
    49 000002DD 89EC                <1>         mov     sp, bp
    50 000002DF 5D                  <1>         pop     bp
    51                              <1> 
    52 000002E0 C3                  <1>         ret
    96                                  %include "../modules/real/get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1>         ;----------------------------------
     3                              <1>         ; レジスタの保存
     4                              <1>         ;----------------------------------
     5 000002E1 6650                <1>         push    eax
     6 000002E3 6653                <1>         push    ebx
     7 000002E5 6651                <1>         push    ecx
     8 000002E7 6652                <1>         push    edx
     9 000002E9 56                  <1>         push    si
    10 000002EA 57                  <1>         push    di
    11 000002EB 55                  <1>         push    bp
    12                              <1> 
    13                              <1>         ;----------------------------------
    14                              <1>         ; 処理の開始
    15                              <1>         ;----------------------------------
    16 000002EC 68[8003]E8CEFD83C4- <1>         cdecl   puts, .s0                   ; // ヘッダを表示
    16 000002F4 02                  <1>
    17                              <1> 
    18 000002F5 BD0000              <1>         mov     bp, 0                       ; linse = 0;    // 行数
    19 000002F8 66BB00000000        <1>         mov     ebx, 0                      ; index = 0;    // インデックスを初期化
    20                              <1> .10L:                                       ; do
    21                              <1>                                             ; {
    22 000002FE 66B820E80000        <1>         mov     eax, 0x0000E820             ;   EAX = 0xE820;
    23                              <1>                                             ;   EBX = インデックス;
    24 00000304 66B914000000        <1>         mov     ecx, E820_RECORD_SIZE       ;   ECX = 要求バイト数;
    25 0000030A 66BA50414D53        <1>         mov     edx, 'PAMS'                 ;   EDX = 'SMAP';
    26 00000310 BF[0C04]            <1>         mov     di, .b0                     ;   ES:DI = バッファ;
    27 00000313 CD15                <1>         int     0x15                        ;   BIOS(0x15, 0xE820);
    28                              <1> 
    29                              <1>         ; コマンドに対応か?
    30 00000315 663D50414D53        <1>         cmp     eax, 'PAMS'                 ;   if('SMAP' != EAX)
    31 0000031B 7402                <1>         je      .12E                        ;   {
    32 0000031D EB4C                <1>         jmp     .10E                        ;     break;    // コマンド未対応
    33                              <1> .12E:                                       ;   }
    34                              <1> 
    35                              <1>         ; エラーなし?                        ;   if(CF)
    36 0000031F 7302                <1>         jnc     .14E                        ;   {
    37 00000321 EB48                <1>         jmp     .10E                        ;     break;    // エラー発生
    38                              <1> .14E:                                       ;   }
    39                              <1> 
    40                              <1>         ; 1レコード分のメモリ情報を表示
    41 00000323 57E8F90083C402      <1>         cdecl   put_mem_info, di            ;   1レコード分のメモリ情報を表示   
    42                              <1> 
    43                              <1>         ; ACPI dataのアドレスを取得
    44 0000032A 668B4510            <1>         mov     eax, [di + 16]              ;   EAX = レコードタイプ;
    45 0000032E 6683F803            <1>         cmp     eax, 3                      ;   if(3 == EAX)  // ACPI data
    46 00000332 750F                <1>         jne     .15E                        ;   {
    47                              <1>                                             ;
    48 00000334 668B05              <1>         mov     eax, [di + 0]               ;      EAX = BASEアドレス;
    49 00000337 66A3[9405]          <1>         mov     [ACPI_DATA.adr], eax        ;      ACPI_DATA.adr = EAX;
    50                              <1>                                             ;
    51 0000033B 668B4508            <1>         mov     eax, [di + 8]               ;      EAX = Length;
    52 0000033F 66A3[9805]          <1>         mov     [ACPI_DATA.len], eax        ;      ACPI_DATA.len = EAX;
    53                              <1> .15E:                                       ;   }
    54                              <1> 
    55 00000343 6683FB00            <1>         cmp     ebx, 0                      ;   if(0 != EBX)
    56 00000347 741C                <1>         jz      .16E                        ;   {
    57                              <1>                                             ;
    58 00000349 45                  <1>         inc     bp                          ;     lines++;
    59 0000034A 83E507              <1>         and     bp, 0x07                    ;     lines &= 0x07;
    60 0000034D 7516                <1>         jnz     .16E                        ;     if(0 == lines)
    61                              <1>                                             ;     {
    62 0000034F 68[F303]E86BFD83C4- <1>         cdecl   puts, .s2                   ;       // 中断メッセージを表示
    62 00000357 02                  <1>
    63 00000358 B410                <1>         mov     ah, 0x10                    ;
    64 0000035A CD16                <1>         int     0x16                        ;       // キー入力待ち
    65                              <1>                                             ;
    66 0000035C 68[FE03]E85EFD83C4- <1>         cdecl   puts, .s3                   ;       // 中断メッセージを消去
    66 00000364 02                  <1>
    67                              <1>                                             ;     }
    68                              <1> .16E:                                       ;    }
    69                              <1>                                             ;
    70 00000365 6683FB00            <1>         cmp     ebx, 0                      ;
    71 00000369 7593                <1>         jne     .10L                        ; }
    72                              <1> .10E:                                       ; while(0 == EBX);
    73                              <1> 
    74 0000036B 68[C303]E84FFD83C4- <1>         cdecl   puts, .s1                   ; // フッタを表示
    74 00000373 02                  <1>
    75                              <1> 
    76                              <1>         ;----------------------------------
    77                              <1>         ; レジスタの復帰
    78                              <1>         ;----------------------------------
    79 00000374 5D                  <1>         pop     bp
    80 00000375 5F                  <1>         pop     di
    81 00000376 5E                  <1>         pop     si
    82 00000377 665A                <1>         pop     edx
    83 00000379 6659                <1>         pop     ecx
    84 0000037B 665B                <1>         pop     ebx
    85 0000037D 6658                <1>         pop     eax
    86                              <1> 
    87 0000037F C3                  <1>         ret
    88                              <1> 
    89 00000380 2045383230204D656D- <1> .s0:    db  " E820 Memory Map:", 0x0A, 0x0D
    89 00000389 6F7279204D61703A0A- <1>
    89 00000392 0D                  <1>
    90 00000393 20426173655F5F5F5F- <1>         db  " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
    90 0000039C 5F5F5F5F5F5F5F5F5F- <1>
    90 000003A5 204C656E6774685F5F- <1>
    90 000003AE 5F5F5F5F5F5F5F5F5F- <1>
    90 000003B7 20547970655F5F5F5F- <1>
    90 000003C0 0A0D00              <1>
    91 000003C3 202D2D2D2D2D2D2D2D- <1> .s1:	db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
    91 000003CC 2D2D2D2D2D2D2D2D2D- <1>
    91 000003D5 202D2D2D2D2D2D2D2D- <1>
    91 000003DE 2D2D2D2D2D2D2D2D2D- <1>
    91 000003E7 202D2D2D2D2D2D2D2D- <1>
    91 000003F0 0A0D00              <1>
    92 000003F3 203C6D6F72652E2E2E- <1> .s2:    db  " <more...>", 0
    92 000003FC 3E00                <1>
    93 000003FE 0D2020202020202020- <1> .s3:    db  0x0D, "          ", 0x0D, 0
    93 00000407 20200D00            <1>
    94                              <1> 
    95 0000040B 00                  <1> ALIGN 4, db 0
    96 0000040C 00<rept>            <1> .b0:    times E820_RECORD_SIZE db 0
    97                              <1> 
    98                              <1> put_mem_info:
    99                              <1>         ;----------------------------------
   100                              <1>         ; スタックフレームの構築
   101                              <1>         ;----------------------------------
   102                              <1>                                             ;      4| バッファアドレス
   103                              <1>                                             ;      2| IP(戻り番地)
   104 00000420 55                  <1>         push    bp                          ;  BP+ 0| BP(元の値)
   105 00000421 89E5                <1>         mov     bp, sp                      ;-------+--------
   106                              <1> 
   107                              <1>         ;----------------------------------
   108                              <1>         ; レジスタの保存
   109                              <1>         ;----------------------------------
   110 00000423 53                  <1>         push    bx
   111 00000424 56                  <1>         push    si
   112                              <1> 
   113                              <1>         ;----------------------------------
   114                              <1>         ; 引数を取得
   115                              <1>         ;----------------------------------
   116 00000425 8B7604              <1>         mov     si, [bp + 4]                ; SI = バッファアドレス;
   117                              <1> 
   118                              <1>         ;----------------------------------
   119                              <1>         ; レコードの表示
   120                              <1>         ;----------------------------------
   121                              <1> 
   122                              <1>         ; Base(64bit)
   123 00000428 6A046A106A0468-     <1>         cdecl   itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
   123 0000042F [FF04]FF7406E8C9FD- <1>
   123 00000437 83C40A              <1>
   124 0000043A 6A046A106A0468-     <1>         cdecl   itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
   124 00000441 [0305]FF7404E8B7FD- <1>
   124 00000449 83C40A              <1>
   125 0000044C 6A046A106A0468-     <1>         cdecl   itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
   125 00000453 [0805]FF7402E8A5FD- <1>
   125 0000045B 83C40A              <1>
   126 0000045E 6A046A106A0468-     <1>         cdecl   itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
   126 00000465 [0C05]FF34E894FD83- <1>
   126 0000046D C40A                <1>
   127                              <1> 
   128                              <1>         ; Length(64bit)
   129 0000046F 6A046A106A0468-     <1>         cdecl   itoa, word [si + 14], .p4 + 0, 4, 16, 0b0100
   129 00000476 [1105]FF740EE882FD- <1>
   129 0000047E 83C40A              <1>
   130 00000481 6A046A106A0468-     <1>         cdecl   itoa, word [si + 12], .p4 + 4, 4, 16, 0b0100
   130 00000488 [1505]FF740CE870FD- <1>
   130 00000490 83C40A              <1>
   131 00000493 6A046A106A0468-     <1>         cdecl   itoa, word [si + 10], .p5 + 0, 4, 16, 0b0100
   131 0000049A [1A05]FF740AE85EFD- <1>
   131 000004A2 83C40A              <1>
   132 000004A5 6A046A106A0468-     <1>         cdecl   itoa, word [si +  8], .p5 + 4, 4, 16, 0b0100
   132 000004AC [1E05]FF7408E84CFD- <1>
   132 000004B4 83C40A              <1>
   133                              <1> 
   134                              <1>         ; Type(64bit)
   135 000004B7 6A046A106A0468-     <1>         cdecl   itoa, word [si + 18], .p6 + 0, 4, 16, 0b0100
   135 000004BE [2305]FF7412E83AFD- <1>
   135 000004C6 83C40A              <1>
   136 000004C9 6A046A106A0468-     <1>         cdecl   itoa, word [si + 16], .p6 + 4, 4, 16, 0b0100
   136 000004D0 [2705]FF7410E828FD- <1>
   136 000004D8 83C40A              <1>
   137                              <1> 
   138 000004DB 68[FE04]E8DFFB83C4- <1>         cdecl   puts, .s1                           ;   // レコード情報を表示
   138 000004E3 02                  <1>
   139                              <1> 
   140 000004E4 8B5C10              <1>         mov     bx, [si + 16]                       ;   // タイプを文字列で表示
   141 000004E7 83E307              <1>         and     bx, 0x07                            ;   BX = Type(0~5)
   142 000004EA D1E3                <1>         shl     bx, 1                               ;   BX *= 2;    // 要素サイズに変換
   143 000004EC 81C3[8005]          <1>         add     bx, .t0                             ;   BX += .t0;  // テーブルの先頭アドレスを加算
   144 000004F0 FF37E8CBFB83C402    <1>         cdecl   puts, word [bx]                     ;   puts(*BX);
   145                              <1> 
   146                              <1> 
   147                              <1> 
   148                              <1>         ;----------------------------------
   149                              <1>         ; レジスタの復帰
   150                              <1>         ;----------------------------------
   151 000004F8 5E                  <1>         pop     si
   152 000004F9 5B                  <1>         pop     bx
   153                              <1> 
   154                              <1>         ;----------------------------------
   155                              <1>         ; スタックフレームの破棄
   156                              <1>         ;----------------------------------
   157 000004FA 89EC                <1>         mov     sp, bp
   158 000004FC 5D                  <1>         pop     bp
   159                              <1> 
   160 000004FD C3                  <1>         ret
   161                              <1> 
   162 000004FE 20                  <1> .s1:    db  " "
   163 000004FF 5A5A5A5A5A5A5A5A5F  <1> .p2:    db  "ZZZZZZZZ_"
   164 00000508 5A5A5A5A5A5A5A5A5F  <1> .p3:    db  "ZZZZZZZZ_"
   165 00000511 5A5A5A5A5A5A5A5A5F  <1> .p4:    db  "ZZZZZZZZ_"
   166 0000051A 5A5A5A5A5A5A5A5A20  <1> .p5:    db  "ZZZZZZZZ "
   167 00000523 5A5A5A5A5A5A5A5A00  <1> .p6:    db  "ZZZZZZZZ", 0
   168                              <1> 
   169 0000052C 2028556E6B6E6F776E- <1> .s4:    db  " (Unknown)", 0x0A, 0x0D, 0
   169 00000535 290A0D00            <1>
   170 00000539 2028757361626C6529- <1> .s5:    db  " (usable)", 0x0A, 0x0D, 0
   170 00000542 0A0D00              <1>
   171 00000545 202872657365727665- <1> .s6:    db  " (reserved)", 0x0A, 0x0D, 0
   171 0000054E 64290A0D00          <1>
   172 00000553 202841435049206461- <1> .s7:    db  " (ACPI data)", 0x0A, 0x0D, 0
   172 0000055C 7461290A0D00        <1>
   173 00000562 202841435049204E56- <1> .s8:    db  " (ACPI NVS)", 0x0A, 0x0D, 0
   173 0000056B 53290A0D00          <1>
   174 00000570 2028626164206D656D- <1> .s9:    db  " (bad memory)", 0x0A, 0x0D, 0
   174 00000579 6F7279290A0D00      <1>
   175                              <1> 
   176 00000580 [2C05][3905][4505]- <1> .t0:    dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   176 00000586 [5305][6205][7005]- <1>
   176 0000058C [2C05][2C05]        <1>
    97                                  
    98                                  ;************************************************
    99                                  ;   リアルモード時に取得した情報
   100                                  ;************************************************
   101                                  FONT:                                           ; フォント
   102 00000590 0000                    .seg:   dw  0
   103 00000592 0000                    .off:   dw  0
   104                                  ACPI_DATA:                                      ; ACPI data
   105 00000594 00000000                .adr:   dd  0                                   ; ACPI data address
   106 00000598 00000000                .len:   dd  0                                   ; ACPI data length
   107                                  
   108                                  ;************************************************
   109                                  ;   ブート処理の第2ステージ
   110                                  ;************************************************
   111                                  stage_2:
   112                                          ;----------------------------------
   113                                          ;  文字列を表示
   114                                          ;----------------------------------
   115 0000059C 68[1606]E81EFB83C4-             cdecl   puts, .s0                       ; puts(.s0);
   115 000005A4 02                 
   116                                          
   117                                          ;----------------------------------
   118                                          ;  ドライブ情報を取得
   119                                          ;----------------------------------
   120 000005A5 68[B800]E8D5FC83C4-             cdecl   get_drive_param, BOOT           ; get_drive_param(DX, BOOT.CYLN);
   120 000005AD 02                 
   121 000005AE 83F800                          cmp     ax, 0                           ; if(0 == AX)
   122 000005B1 750C                    .10Q:   jne     .10E                            ; {
   123 000005B3 68[4D06]E807FB83C4-     .10T:   cdecl   puts, .e0                       ;   puts(.e0);
   123 000005BB 02                 
   124 000005BC E820FB                          call    reboot                          ;   reboot();   // 再起動
   125                                  .10E:                                           ; }
   126                                          
   127                                          ;----------------------------------
   128                                          ;  ドライブ情報を表示
   129                                          ;----------------------------------
   130 000005BF A1[B800]                        mov     ax, [BOOT + drive.no]           ; AX = ブートドライブ;
   131 000005C2 6A046A106A0268-                 cdecl   itoa, ax, .p1, 2, 16, 0b0100    ;
   131 000005C9 [2E06]50E831FC83C4-
   131 000005D1 0A                 
   132 000005D2 A1[BA00]                        mov     ax, [BOOT + drive.cyln]         ;
   133 000005D5 6A046A106A0468-                 cdecl   itoa, ax, .p2, 4, 16, 0b0100    ;
   133 000005DC [3606]50E81EFC83C4-
   133 000005E4 0A                 
   134 000005E5 A1[BC00]                        mov     ax, [BOOT + drive.head]         ; AX = ヘッド数;
   135 000005E8 6A046A106A0268-                 cdecl   itoa, ax, .p3, 2, 16, 0b0100    ;
   135 000005EF [4006]50E80BFC83C4-
   135 000005F7 0A                 
   136 000005F8 A1[BE00]                        mov     ax, [BOOT + drive.sect]         ; AX = トラック当たりのセクタ数;
   137 000005FB 6A046A106A0268-                 cdecl   itoa, ax, .p4, 2, 16, 0b0100    ;
   137 00000602 [4806]50E8F8FB83C4-
   137 0000060A 0A                 
   138 0000060B 68[2506]E8AFFA83C4-             cdecl   puts, .s1
   138 00000613 02                 
   139                                  
   140                                          ;----------------------------------
   141                                          ;  次のステージへ以降
   142                                          ;----------------------------------
   143 00000614 EB52                            jmp     stage_3                         ; 次のステージへ以降
   144                                  
   145                                          ;----------------------------------
   146                                          ;  データ
   147                                          ;----------------------------------
   148 00000616 326E64207374656765-     .s0     db  "2nd stege...", 0x0A, 0x0D, 0
   148 0000061F 2E2E2E0A0D00       
   149                                  
   150 00000625 2044726976653A3078      .s1     db  " Drive:0x"
   151 0000062E 20202C20433A3078        .p1     db  "  , C:0x"
   152 00000636 202020202C20483A30-     .p2     db  "    , H:0x"
   152 0000063F 78                 
   153 00000640 20202C20533A3078        .p3     db  "  , S:0x"
   154 00000648 20200A0D00              .p4     db  "  ", 0x0A, 0x0D, 0
   155                                  
   156 0000064D 43616E277420676574-     .e0     db  "Can't get drive parameter.", 0
   156 00000656 206472697665207061-
   156 0000065F 72616D657465722E00 
   157                                  
   158                                  ;************************************************
   159                                  ;   ブート処理の第3ステージ
   160                                  ;************************************************
   161                                  stage_3:
   162                                          ;----------------------------------
   163                                          ; 文字列を表示
   164                                          ;----------------------------------
   165 00000668 68[E506]E852FA83C4-             cdecl   puts, .s0
   165 00000670 02                 
   166                                  
   167                                          ;----------------------------------
   168                                          ; プロテクトモードで使用するフォントは
   169                                          ; BIOSに内蔵されたものを流用する
   170                                          ;----------------------------------
   171 00000671 68[9005]E84AFC83C4-             cdecl   get_font_adr, FONT              ; // BIOSのを取得
   171 00000679 02                 
   172                                  
   173                                          ;----------------------------------
   174                                          ; フォントアドレスの表示
   175                                          ;----------------------------------
   176 0000067A 6A046A106A0468-                 cdecl   itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   176 00000681 [0107]FF36[9005]E8-
   176 00000688 76FB83C40A         
   177 0000068D 6A046A106A0468-                 cdecl   itoa, word [FONT.off], .p2, 4, 16, 0b0100
   177 00000694 [0607]FF36[9205]E8-
   177 0000069B 63FB83C40A         
   178 000006A0 68[F406]E81AFA83C4-             cdecl   puts, .s1
   178 000006A8 02                 
   179                                  
   180                                          ;----------------------------------
   181                                          ;  メモリ情報の取得と表示
   182                                          ;----------------------------------
   183 000006A9 E835FC                          cdecl   get_mem_info                    ; get_mem_info();
   184                                  
   185 000006AC 66A1[9405]                      mov     eax, [ACPI_DATA.adr]            ; EAX = ACPI_DATA.adr;
   186 000006B0 6683F800                        cmp     eax, 0                          ; if(EAX)
   187 000006B4 742D                            je      .10E                            ; {
   188                                  
   189 000006B6 6A046A106A0468-                 cdecl   itoa, ax, .p4, 4, 16, 0b0100    ;    itoa(AX);  // 下位アドレスを変換
   189 000006BD [1F07]50E83DFB83C4-
   189 000006C5 0A                 
   190 000006C6 66C1E810                        shr     eax, 16                         ;    EAX >>= 16;
   191 000006CA 6A046A106A0468-                 cdecl   itoa, ax, .p3, 4, 16, 0b0100    ;    itoa(AX);  // 上位アドレスを変換
   191 000006D1 [1B07]50E829FB83C4-
   191 000006D9 0A                 
   192                                  
   193 000006DA 68[1007]E8E0F983C4-             cdecl   puts, .s2                       ;    puts(.s2); // アドレスを表示
   193 000006E2 02                 
   194                                  .10E:                                           ; }
   195                                  
   196                                          ;----------------------------------
   197                                          ;  処理の終了
   198                                          ;----------------------------------
   199 000006E3 EBFE                            jmp     $                               ; while(1);     // 無限ループ
   200                                  
   201                                          ;----------------------------------
   202                                          ;  データ
   203                                          ;----------------------------------
   204 000006E5 337264207374616765-     .s0     db  "3rd stage...", 0x0A, 0x0D, 0
   204 000006EE 2E2E2E0A0D00       
   205                                  
   206 000006F4 466F6E742041646472-     .s1     db  "Font Address="
   206 000006FD 6573733D           
   207 00000701 5A5A5A5A3A              .p1     db  "ZZZZ:"
   208 00000706 5A5A5A5A0A0D00          .p2     db  "ZZZZ", 0x0A, 0x0D, 0
   209 0000070D 0A0D00                          db  0x0A, 0x0D, 0
   210                                  
   211 00000710 204143504920646174-     .s2     db  " ACPI data="
   211 00000719 613D               
   212 0000071B 5A5A5A5A                .p3     db  "ZZZZ"
   213 0000071F 5A5A5A5A0A0D00          .p4     db  "ZZZZ", 0x0A, 0x0D, 0
   214                                  
   215                                  ;************************************************
   216                                  ;   パディング
   217                                  ;************************************************
   218 00000726 00<rept>                        times BOOT_SIZE - ($ - $$)     db  0   ; パディング
